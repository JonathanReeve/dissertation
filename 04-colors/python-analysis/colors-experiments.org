* Colors Experiments

** Init
#+name: session_init
#+BEGIN_SRC python :results output :session session_init

  #import spacy
  import pandas as pd
  #from nltk.corpus import wordnet as wn
  import nltk
  import matplotlib.pyplot as plt
  import re
  import altair as alt
  from matplotlib.colors import to_rgb, rgb_to_hsv
  #nlp = spacy.load('en_core_web_lg')
  #dalloway = open('dalloway.txt', errors="ignore").read()
#+END_SRC

Warning (python): Your ‘python-shell-interpreter’ doesn’t seem to support readline, yet ‘python-shell-completion-native-enable’ was t and "python" is not part of the ‘python-shell-completion-native-disabled-interpreters’ list.  Native completions have been disabled locally. 

#+RESULTS: session_init
: Python 3.7.5 (default, Oct 14 2019, 23:08:55) 
: [GCC 8.3.0] on linux
: Type "help", "copyright", "credits" or "license" for more information.

** WordNet Color Searches
Start by creating a dictionary for color values from WordNet. This will be a simple lexical approach, but good as a first experiment.

#+BEGIN_SRC python :results output :session session_init
  # Do this first
  # nltk.download('wordnet')

for synset in wn.synsets('blue'): 
  print(synset.definition())
#+END_SRC

#+RESULTS:
: Traceback (most recent call last):
:   File "<stdin>", line 1, in <module>
:   File "/tmp/babel-rPen9X/python-GkgIRP", line 4, in <module>
:     for synset in wn.synsets('blue'): 
: NameError: name 'wn' is not defined

Navigate the WordNet hierarchy, up to colors, and then get all hyponyms of colors, and all of their hyponyms, and all associated lemma. 

#+BEGIN_SRC python :results output :session session_init
  blueSyn = wn.synsets('blue')[0]
  color = blueSyn.hypernyms()[0]
  colors = color.hyponyms()
  colorTree = {}
  for color in colors:   
    colorLemmas = color.lemmas()
    colorName = colorLemmas[0].name().replace('_', ' ')
    # print(dir(color))
    colorTree[colorName] = [w.name().replace('_',' ') for w in colorLemmas if hasattr(w, 'name')]
    for lemma in [w.lemmas() for w in color.hyponyms()]:
       for w in lemma:
         colorTree[colorName].append(w.name().replace('_',' '))
  print(colorTree)

#+END_SRC

#+RESULTS:
: {'blond': ['blond', 'blonde'], 'blue': ['blue', 'blueness', 'azure', 'cerulean', 'sapphire', 'lazuline', 'sky-blue', 'dark blue', 'navy', 'navy blue', 'greenish blue', 'aqua', 'aquamarine', 'turquoise', 'cobalt blue', 'peacock blue', 'powder blue', 'Prussian blue', 'purplish blue', 'royal blue', 'steel blue', 'ultramarine'], 'brown': ['brown', 'brownness', 'chestnut', 'chocolate', 'coffee', 'deep brown', 'umber', 'burnt umber', 'hazel', 'light brown', 'mocha', 'olive brown', 'puce', 'reddish brown', 'sepia', 'burnt sienna', 'Venetian red', 'mahogany', 'taupe', 'Vandyke brown', 'yellowish brown', 'raw sienna', 'buff', 'caramel', 'caramel brown'], 'complementary color': ['complementary color', 'complementary'], 'green': ['green', 'greenness', 'viridity', 'bluish green', 'blue green', 'teal', 'bottle green', 'chrome green', 'emerald', 'greenishness', 'jade green', 'jade', 'olive green', 'olive-green', 'sage green', 'sea green', 'yellow green', 'yellowish green', 'chartreuse', 'Paris green', 'pea green'], 'olive': ['olive', 'olive drab', 'drab'], 'orange': ['orange', 'orangeness', 'reddish orange'], 'pastel': ['pastel'], 'pink': ['pink', 'carnation', 'coral', 'pinkness', 'rose', 'rosiness', 'solferino', 'purplish pink', 'yellowish pink', 'apricot', 'peach', 'salmon pink'], 'purple': ['purple', 'purpleness', 'lavender', 'mauve', 'reddish purple', 'royal purple', 'violet', 'reddish blue'], 'red': ['red', 'redness', 'cardinal', 'carmine', 'cerise', 'cherry', 'cherry red', 'chrome red', 'crimson', 'ruby', 'deep red', 'dark red', 'purplish red', 'purplish-red', 'sanguine', 'scarlet', 'vermilion', 'orange red', 'Turkey red', 'alizarine red'], 'salmon': ['salmon'], 'yellow': ['yellow', 'yellowness', 'amber', 'gold', 'brownish yellow', 'canary yellow', 'canary', 'gamboge', 'lemon', 'lemon yellow', 'maize', 'greenish yellow', 'old gold', 'orange yellow', 'saffron', 'pale yellow', 'straw', 'wheat']}

: #+RESULTS:[Synset('chromatic_color.n.01')]


I'm sure there are extra colors hiding in there somewhere. But how exactly to look for them is not immediately apparent. Meronyms? Holonyms?
 
#+BEGIN_SRC python :results output :session session_init
dir(color)
#+END_SRC

#+RESULTS:
: ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '__unicode__', '__weakref__', '_all_hypernyms', '_definition', '_examples', '_frame_ids', '_hypernyms', '_instance_hypernyms', '_iter_hypernym_lists', '_lemma_names', '_lemma_pointers', '_lemmas', '_lexname', '_max_depth', '_min_depth', '_name', '_needs_root', '_offset', '_pointers', '_pos', '_related', '_shortest_hypernym_paths', '_wordnet_corpus_reader', 'also_sees', 'attributes', 'causes', 'closure', 'common_hypernyms', 'definition', 'entailments', 'examples', 'frame_ids', 'hypernym_distances', 'hypernym_paths', 'hypernyms', 'hyponyms', 'instance_hypernyms', 'instance_hyponyms', 'jcn_similarity', 'lch_similarity', 'lemma_names', 'lemmas', 'lexname', 'lin_similarity', 'lowest_common_hypernyms', 'max_depth', 'member_holonyms', 'member_meronyms', 'min_depth', 'name', 'offset', 'part_holonyms', 'part_meronyms', 'path_similarity', 'pos', 'region_domains', 'res_similarity', 'root_hypernyms', 'shortest_path_distance', 'similar_tos', 'substance_holonyms', 'substance_meronyms', 'topic_domains', 'tree', 'unicode_repr', 'usage_domains', 'verb_groups', 'wup_similarity']

#+BEGIN_SRC python :results output :session session_init
dallowayDoc = nlp(dalloway)
#+END_SRC

#+RESULTS:

Next, get vectors for all of these, go through each word in /Mrs Dalloway/, and check its similarity against those vectors.
 - Come up with a good similarity score that is discriminating.
 - Ideally, the vector space shouldn't be the GloVe vectors, but some custom vector space.


#+BEGIN_SRC python :results output :session session_init
  def getContext(doc, i, numContextWords=4):
    return [doc[i] for i in range(i-numContextWords, i+numContextWords)]

  colorCount = {color: 0 for color, lemmas in colorTree.items()}
  foundInstances = []
  for w in dallowayDoc: 
    for color, lemmas in colorTree.items():
      if w.lemma_ in lemmas: 
        colorCount[color] += 1 
        foundInstances.append(getContext(dallowayDoc, w.i))
  print(colorCount)
  print(foundInstances)


#+END_SRC

#+RESULTS:
#+begin_example
{'blond': 0, 'blue': 25, 'brown': 20, 'complementary color': 0, 'green': 29, 'olive': 1, 'orange': 1, 'pastel': 0, 'pink': 71, 'purple': 5, 'red': 35, 'salmon': 8, 'yellow': 39}
[[of, the, jay, ,, blue, -, green, ,], [jay, ,, blue, -, green, ,, light, ,], [of, the, grey, -, blue, morning, air, ,], [lovely, old, sea-, 
, green, brooches, in, eighteenth], [a, few, pearls, ;, salmon, on, an, iceblock], [
, cared, not, a, straw, for, either, of], [., 

, Not, a, straw, ,, she, thought], [,, dressed, in, a, green, mackintosh, coat, .], [hands, were, always, bright, red, ,, as, if], [lilac, ;, and, 
, carnations, ,, masses, of], [carnations, ,, masses, of, carnations, .,  , There], [.,  , There, were, roses, ;, there, were], [the, 
, irises, and, roses, and, nodding, tufts], [in, wicker, trays, the, roses, 
, looked, ;], [dark, and, prim, the, red, carnations, ,, holding], [and, prim, the, red, carnations, ,, holding, their], [their, bowls, ,, tinged, violet, ,, 
, snow], [pick, sweet, peas, and, roses, after, the, superb], [,, with, its, almost, blue, -, black, sky], [delphiniums, ,, its, 
, carnations, ,, its, arum], [when, every, flower, --, roses, ,, carnations, ,], [flower, --, roses, ,, carnations, ,, irises, ,], [glows, ;, white, ,, violet, ,, red, ,], [white, ,, violet, ,, red, ,, deep, orange], [,, red, ,, deep, orange, ;, every, flower], [out, ,, over, the, cherry, pie, ,, over], [nosed, ,, 
, wearing, brown, shoes, and, a], [shabby, overcoat, ,, with, hazel, eyes, which, 
], [parasols, ;, here, a, green, ,, here, a], [green, ,, here, a, red, 
, parasol, opened], [with, her, little, 
, pink, face, pursed, in], [
, dust, and, the, gold, stoppings, of, innumerable], [or, above, it, ,, lemon, or, pale, grey], [a, bunch, 
, of, roses, --, into, St.], [Mall, ,, in, the, Green, Park, ,, in], [and, thickening, 
, from, blue, to, the, green], [from, blue, to, the, green, of, a, hollow], [the, white, and, 
, blue, ,, barred, with], [,, showing, the, 
, red, -, brown, cows], [the, 
, red, -, brown, cows, peacefully, grazing], [like, a, length, of, green, stuff, 
, with], [a, ceiling, cloth, of, blue, and, pink, smoke], [cloth, of, blue, and, pink, smoke, high, above], [no, mere, matter, of, roses, ,, and, what], [the, loss, of, 
, roses, .,  , Pity], [spread, out, and, dark, brown, woods, where, 
], [to, dogs, and, 
, canaries, ,, above, all], [sounds, ,, of, the, green, lights, ,, of], [There, was, 
, the, green, linoleum, and, a], [and, laid, her, feathered, yellow, hat, on, the], [off, ,, left, a, ruby, ring, .,  ], [be, wrapped, 
, in, brown, paper, ), .], [and, down, in, the, pink, evening, light, ,], [

, She, was, wearing, pink, gauze, --, was], [,, seeing, the, delicate, pink, face, of, the], [,, gently, detached, the, green, dress, and, carried], [By, artificial, light, the, green, shone, ,, but], [,, turning, a, little, pink, ,, Could, n't], [pause, ,, collected, the, green, folds, 
, together], [knife, towards, her, 
, green, dress, ., 

], [by, side, on, the, blue, sofa, ,, challenged], [;, his, hands, are, red, ;, and, he], [very, young, ;, very, pink, ;, very, bright], [to, the, end, of, green, silk, ,, 
], [-, coat, with, a, carnation, in, his, buttonhole], [
, cared, not, a, straw, --, not, a], [straw, --, not, a, straw, (, though, it], [Peter, ,, the, 
, red, carnation, he, had], [,, the, 
, red, carnation, he, had, seen], [and, making, her, lips, red, .,  , But], [damned, 
, proprieties, ,, yellow, dressing, -, gowns], [of, those, 
, flat, red, houses, with, hanging], [a, 
, moment, ;, blue, ,, circular, --], [lolloping, away, on, the, green, sea, waves, ,], [
, like, bunches, of, roses, ,, or, rise], [room, was, bathed, in, yellow, light, and, full], [,, 
, turning, bright, pink, ;, somehow, contracting], [,, 
, white, ,, crimson, ), ,, her], [example, ,, the, vivid, green, moss, ., 

], [sitting, there, on, the, green, chair, under, the], [
, All, the, little, red, and, yellow, flowers], [the, little, red, and, yellow, flowers, were, out], [beneath, him, .,  , Red, flowers, grew, through], [the, snows, ,, and, roses, hang, about, him], [--, the, thick, 
, red, roses, which, grow], [the, thick, 
, red, roses, which, grow, on], [
, it, with, soft, gold, in, pure, good], [richness, ;, the, 
, greenness, ;, the, civilisation], [most, respectable, ,, had, roses, blooming, 
, under], [quite, lately, about, ", blue, hydrangeas, ., "], [It, was, seeing, 
, blue, hydrangeas, that, made], [Edith, or, 
, Lady, Violet, ,, perhaps, ;], [in, place, ,, with, rose, -, bushes, 
], [Sally, tearing, off, a, rose, ,, 
, stopping], [that, 
, mattered, a, straw, ,, stood, for], [,, with, nothing, but, red, asters, ,, he], [a, 
, bunch, of, purple, -, heather, ,], [still, the, earth, seemed, green, and, flowery, ;], [she, no, longer, saw, brown, eyes, ,, black], [in, a, tuft, of, blue, smoke, among, the], [had, upright, bristles, of, straw, in, 
, their], [for, 
, he, wore, brown, boots, ;, his], [,, eyes, merely, ;, hazel, ,, large, ;], [two, years, from, a, pink, innocent, oval, to], [heat, ,, flickering, a, red, gold, flame, 
], [,, flickering, a, red, gold, flame, 
, infinitely], [,, she, corrected, in, red, ink, ;, he], [,, walking, in, a, green, dress, in, a], [Isabel, Pole, in, a, green, dress, walking, in], [", a, 
, sturdy, red, -, haired, man], [liked, 
, ices, ,, chocolates, ,, sweet, things], [his, waxed, moustache, ,, coral, tie, -, pin], [the, 
, blood, -, red, nostrils, .,  ], [the, brute, with, the, red, nostrils, had, won], [
, and, put, the, roses, in, a, vase], [had, to, buy, the, roses, ,, Rezia, said], [,, arranging, the, 
, roses, ., 

, So], [presumably, ;, and, the, roses, ,, which, 
], [Clarissa, Dalloway, laid, her, green, dress, on, her], [the, 
, wall, of, gold, ,, mounting, minute], [the, wall, 
, of, gold, that, was, mounting], [,, on, a, 
, pink, card, ), .], [
, pencil, on, a, pink, card, ., 

], [walking, hospitals, ,, catching, salmon, ,, begetting, one], [Bradshaw, ,, who, caught, salmon, herself, 
, and], [,, she, had, caught, salmon, 
, freely, :], [a, 
, bunch, of, carnations, and, asking, Miss], [She, took, Hugh, 's, carnations, with, her, angular], [mats, ,, saucers, of, red, fruit, ;, films], [fruit, ;, films, of, brown, 
, cream, mask], [the, wine, and, the, coffee, (, not, 
], [the, beauty, of, the, red, 
, carnations, which], [of, the, red, 
, carnations, which, Lady, Bruton], [Lady, Bruton, raised, the, carnations, ,, holding, them], [
, have, had, their, coffee, ,, Lady, Bruton], [so, laid, the, 
, carnations, down, beside, her], [depth, in, the, 
, brown, of, his, eyes], [instructed, to, quicken, the, coffee, ., 

, "], [", 

, (, The, coffee, was, very, slow], [waiting, to, bring, the, coffee, until, Mr., Whitbread], [kept, himself, in, the, pink, of, condition, .], [all, 
, Hugh, 's, carnations, into, the, front], [in, the, hall, taking, yellow, gloves, from, the], [and, 
, blushed, brick, red, ,, Richard, turned], [and, about, and, the, yellow, butterflies, .,  ], [veil, hung, .,  , Yellow, awnings, trembled, .], [parted, curtains, of, 
, green, blades, ;, moved], [sky, ;, 
, the, blue, ,, the, steadfast], [did, n't, care, a, straw, what, became, of], [trust, his, taste, in, gold, ;, any, number], [of, 
, flowers, ,, roses, ,, orchids, ,], [thought, ,, grasping, his, red, and, white, 
], [red, and, white, 
, roses, together, (, a], [thought, ,, crossing, the, Green, Park, and, observing], [as, if, 
, a, yellow, lamp, were, moved], [out, 
, flowers, --, roses, ,, red, and], [flowers, --, roses, ,, red, and, white, roses], [,, red, and, white, roses, .,  , (], [ , Clarissa, thought, the, roses, 
, absolutely, lovely], [", Elizabeth, 
, turns, pink, .,  , They], [
, There, were, the, roses, ., 

, "], [,, looking, at, his, roses, .,  , And], [much, more, for, her, roses, than, for, 
], [but, she, loved, her, roses, (, did, n't], [ , There, were, his, roses, .,  , Her], [Peter, ;, then, these, roses, ;, it, was], [fair, -, haired, ;, blue, -, eyed, ;], [,, sheathed, in, glossy, green, ,, with, buds], [,, observing, her, small, pink, 
, face, ,], [to, the, Army, and, Navy, Stores, ., 

], [like, a, bar, of, gold, on, the, sea], [into, the, 
, cool, brown, tobacco, department, of], [of, the, Army, and, Navy, Stores, while, she], [were, the, petticoats, ,, brown, ,, decorous, ,], [that, cake, --, the, pink, one, .,  ], [
, inches, of, a, chocolate, clair, ., 

], [
, inches, of, the, chocolate, clair, ,, then], [hat, askew, ,, very, red, in, the, face], [,, glistening, with, 
, red, and, yellow, varnish], [with, 
, red, and, yellow, varnish, .,  ], [
, the, Army, and, Navy, Stores, .,  ], [
, bone, ,, a, blue, petal, ,, some], [-, white, 
, or, gold, -, kindled, surface], [now, the, bananas, bright, yellow, ,, now, 
], [made, the, omnibuses, bright, yellow, ,, seemed, 
], [
, watching, the, watery, gold, glow, and, fade], [live, creature, on, the, roses, ,, on, the], [laughing, hint, like, that, gold, spot, which, went], [the, gramophone, with, the, green, trumpet, .,  ], [with, the, jar, of, roses, .,  , None], [watched, Rezia, trimming, the, straw, hat, for, Mrs.], [said, ,, pinning, a, rose, to, one, side], [with, black, bulrushes, and, blue, 
, swallows, .], [whether, by, moving, the, rose, she, had, improved], [
, brute, with, the, red, nostrils, was, snuffing], [her, honest, light, -, blue, eyes, fixed, on], [HIM, when, she, saw, blue, 
, hydrangeas, )], [faces, ;, her, little, pink, face, 
, showing], [her, !,  , This, blue, envelope, ;, that], [did, n't, care, a, straw, what, people, said], [
, among, the, hairy, red, chairs, and, ash], [placards, proclaiming, in, huge, red, letters, that, there], [
, array, herself, in, blue, and, pearls, ,], [dressed, well, too, ;, pink, stockings, ;, pretty], [refined, them, ,, the, yellow, -, blue, evening], [,, the, yellow, -, blue, evening, light, ;], [,, 
, with, three, purple, ostrich, feathers, in], [and, the, curtains, of, yellow, 
, chintz, :], [of, bread, ,, 
, lemons, ,, soup, tureens], [the, soup, ,, the, salmon, ;, the, salmon], [the, salmon, ;, the, salmon, ,, Mrs., Walker], [it, happened, ,, the, salmon, was, always, underdone], [it, was, the, 
, salmon, that, bothered, Mrs.], [her, ;, in, her, pink, dress, ,, wearing], [., 

, Gently, the, yellow, curtain, with, all], [nervously, and, bought, cheap, pink, flowers, ,, 
], [way, ,, in, the, pink, dress, ?,  ], [,, and, the, 
, roses, which, Richard, had], [
, rigged, up, in, gold, lace, .,  ], [loved, dressing, up, in, gold, lace, 
, and], [wives, .,  , An, olive, -, skinned, youth], [and, a, silver, -, green, mermaid, 's, dress], [Hutton, (, who, wore, red, socks, ,, his], [side, by, the, 
, yellow, curtains, .,  ], [she, 
, with, an, apricot, bloom, of, powder], [own, accord, ,, a, green, frill, ., 

], [
, deepened, ,, became, blue, ,, beheld, ,], [,, or, made, a, green, grass, mound, on], [your, friend, in, the, red, cloak, who, 
], [grey, hair, 
, and, blue, eyes, ,, said], [had, 
, picked, a, rose, .,  , She], [it, still, ,, a, ruby, ring, which, Marie], [the, curtains, ,, in, red, ., 

, (], [so, lovely, in, her, pink, frock, !,  ]]
#+end_example

#+BEGIN_SRC python :results output :session session_init

  pd.Series(colorCount).plot(kind='bar')
  plt.savefig('dalloway-color-cats-1.png')
  'dalloway-color-cats-1.png'

#+END_SRC

** Adjectives
Now again, but with only adjectives, so as to eliminate "carnation" and "rose" showing up as colors: 

#+BEGIN_SRC python :results output :session session_init

  colorCount = {color: 0 for color, lemmas in colorTree.items()}
  foundInstances = []
  for w in dallowayDoc: 
    for color, lemmas in colorTree.items():
      if w.tag_.startswith('J') and w.lemma_ in lemmas: 
        colorCount[color] += 1 
        foundInstances.append(getContext(dallowayDoc, w.i))
  print(colorCount)
  print(foundInstances)


#+END_SRC

#+RESULTS:
#+begin_example
{'blond': 0, 'blue': 19, 'brown': 11, 'complementary color': 0, 'green': 24, 'olive': 1, 'orange': 0, 'pastel': 0, 'pink': 19, 'purple': 2, 'red': 28, 'salmon': 0, 'yellow': 20}
[[of, the, jay, ,, blue, -, green, ,], [jay, ,, blue, -, green, ,, light, ,], [of, the, grey, -, blue, morning, air, ,], [lovely, old, sea-, 
, green, brooches, in, eighteenth], [,, dressed, in, a, green, mackintosh, coat, .], [dark, and, prim, the, red, carnations, ,, holding], [,, with, its, almost, blue, -, black, sky], [white, ,, violet, ,, red, ,, deep, orange], [nosed, ,, 
, wearing, brown, shoes, and, a], [shabby, overcoat, ,, with, hazel, eyes, which, 
], [parasols, ;, here, a, green, ,, here, a], [green, ,, here, a, red, 
, parasol, opened], [with, her, little, 
, pink, face, pursed, in], [
, dust, and, the, gold, stoppings, of, innumerable], [and, thickening, 
, from, blue, to, the, green], [,, showing, the, 
, red, -, brown, cows], [the, 
, red, -, brown, cows, peacefully, grazing], [like, a, length, of, green, stuff, 
, with], [a, ceiling, cloth, of, blue, and, pink, smoke], [cloth, of, blue, and, pink, smoke, high, above], [spread, out, and, dark, brown, woods, where, 
], [sounds, ,, of, the, green, lights, ,, of], [There, was, 
, the, green, linoleum, and, a], [and, laid, her, feathered, yellow, hat, on, the], [be, wrapped, 
, in, brown, paper, ), .], [and, down, in, the, pink, evening, light, ,], [

, She, was, wearing, pink, gauze, --, was], [,, seeing, the, delicate, pink, face, of, the], [,, gently, detached, the, green, dress, and, carried], [By, artificial, light, the, green, shone, ,, but], [pause, ,, collected, the, green, folds, 
, together], [knife, towards, her, 
, green, dress, ., 

], [by, side, on, the, blue, sofa, ,, challenged], [;, his, hands, are, red, ;, and, he], [very, young, ;, very, pink, ;, very, bright], [to, the, end, of, green, silk, ,, 
], [Peter, ,, the, 
, red, carnation, he, had], [and, making, her, lips, red, .,  , But], [damned, 
, proprieties, ,, yellow, dressing, -, gowns], [of, those, 
, flat, red, houses, with, hanging], [a, 
, moment, ;, blue, ,, circular, --], [lolloping, away, on, the, green, sea, waves, ,], [room, was, bathed, in, yellow, light, and, full], [example, ,, the, vivid, green, moss, ., 

], [sitting, there, on, the, green, chair, under, the], [
, All, the, little, red, and, yellow, flowers], [the, little, red, and, yellow, flowers, were, out], [beneath, him, .,  , Red, flowers, grew, through], [--, the, thick, 
, red, roses, which, grow], [quite, lately, about, ", blue, hydrangeas, ., "], [It, was, seeing, 
, blue, hydrangeas, that, made], [,, with, nothing, but, red, asters, ,, he], [a, 
, bunch, of, purple, -, heather, ,], [still, the, earth, seemed, green, and, flowery, ;], [she, no, longer, saw, brown, eyes, ,, black], [in, a, tuft, of, blue, smoke, among, the], [for, 
, he, wore, brown, boots, ;, his], [,, eyes, merely, ;, hazel, ,, large, ;], [two, years, from, a, pink, innocent, oval, to], [heat, ,, flickering, a, red, gold, flame, 
], [,, flickering, a, red, gold, flame, 
, infinitely], [,, she, corrected, in, red, ink, ;, he], [,, walking, in, a, green, dress, in, a], [Isabel, Pole, in, a, green, dress, walking, in], [", a, 
, sturdy, red, -, haired, man], [his, waxed, moustache, ,, coral, tie, -, pin], [the, 
, blood, -, red, nostrils, .,  ], [the, brute, with, the, red, nostrils, had, won], [Clarissa, Dalloway, laid, her, green, dress, on, her], [,, on, a, 
, pink, card, ), .], [
, pencil, on, a, pink, card, ., 

], [mats, ,, saucers, of, red, fruit, ;, films], [fruit, ;, films, of, brown, 
, cream, mask], [the, beauty, of, the, red, 
, carnations, which], [in, the, hall, taking, yellow, gloves, from, the], [and, about, and, the, yellow, butterflies, .,  ], [veil, hung, .,  , Yellow, awnings, trembled, .], [parted, curtains, of, 
, green, blades, ;, moved], [thought, ,, grasping, his, red, and, white, 
], [as, if, 
, a, yellow, lamp, were, moved], [flowers, --, roses, ,, red, and, white, roses], [", Elizabeth, 
, turns, pink, .,  , They], [fair, -, haired, ;, blue, -, eyed, ;], [,, observing, her, small, pink, 
, face, ,], [into, the, 
, cool, brown, tobacco, department, of], [were, the, petticoats, ,, brown, ,, decorous, ,], [that, cake, --, the, pink, one, .,  ], [hat, askew, ,, very, red, in, the, face], [,, glistening, with, 
, red, and, yellow, varnish], [with, 
, red, and, yellow, varnish, .,  ], [
, bone, ,, a, blue, petal, ,, some], [now, the, bananas, bright, yellow, ,, now, 
], [made, the, omnibuses, bright, yellow, ,, seemed, 
], [laughing, hint, like, that, gold, spot, which, went], [the, gramophone, with, the, green, trumpet, .,  ], [with, black, bulrushes, and, blue, 
, swallows, .], [
, brute, with, the, red, nostrils, was, snuffing], [her, honest, light, -, blue, eyes, fixed, on], [faces, ;, her, little, pink, face, 
, showing], [her, !,  , This, blue, envelope, ;, that], [
, among, the, hairy, red, chairs, and, ash], [placards, proclaiming, in, huge, red, letters, that, there], [
, array, herself, in, blue, and, pearls, ,], [dressed, well, too, ;, pink, stockings, ;, pretty], [refined, them, ,, the, yellow, -, blue, evening], [,, the, yellow, -, blue, evening, light, ;], [,, 
, with, three, purple, ostrich, feathers, in], [and, the, curtains, of, yellow, 
, chintz, :], [her, ;, in, her, pink, dress, ,, wearing], [., 

, Gently, the, yellow, curtain, with, all], [nervously, and, bought, cheap, pink, flowers, ,, 
], [way, ,, in, the, pink, dress, ?,  ], [
, rigged, up, in, gold, lace, .,  ], [loved, dressing, up, in, gold, lace, 
, and], [wives, .,  , An, olive, -, skinned, youth], [and, a, silver, -, green, mermaid, 's, dress], [Hutton, (, who, wore, red, socks, ,, his], [side, by, the, 
, yellow, curtains, .,  ], [own, accord, ,, a, green, frill, ., 

], [
, deepened, ,, became, blue, ,, beheld, ,], [,, or, made, a, green, grass, mound, on], [your, friend, in, the, red, cloak, who, 
], [grey, hair, 
, and, blue, eyes, ,, said], [so, lovely, in, her, pink, frock, !,  ]]
#+end_example

#+BEGIN_SRC python :results file :session session_init

  pd.Series(colorCount).plot(kind='bar')
  plt.savefig('dalloway-color-cats-1.png')
  'dalloway-color-cats-1.png'

#+END_SRC

#+RESULTS:

** XKCD Color Mapping

Create new database mapping color to name. 

Color mappings from: https://xkcd.com/color/rgb.txt

#+BEGIN_SRC python :results output :session session_init

  # dalloway = open('data/dalloway.txt', errors='ignore').read()
  xkcdMapRaw = open('data/maps/xkcd/rgb.txt').readlines()[1:]
  xkcdMap = {}
  for line in xkcdMapRaw: 
    splitLine = line.split('\t') 
    if len(splitLine) != 3:
      print('error on: ', splitLine) 
    else:
      name, val, _ = line.split('\t')
      #print(splitLine)
      xkcdMap[name] = val
  #print(xkcdMap)

#+END_SRC

#+RESULTS:

** DONE look for keywords in context
CLOSED: [2019-08-20 mar 16:19]
#+BEGIN_SRC python :results output :session session_init
  # Borrowed from Textacy: https://chartbeat-labs.github.io/textacy/_modules/textacy/text_utils.html#keyword_in_context

  def keyword_in_context(text, keyword, ignore_case=True,
                         window_width=50, print_only=True):
      """
      Search for ``keyword`` in ``text`` via regular expression, return or print strings
      spanning ``window_width`` characters before and after each occurrence of keyword.

      Args:
          text (str): text in which to search for ``keyword``
          keyword (str): technically, any valid regular expression string should work,
              but usually this is a single word or short phrase: "spam", "spam and eggs";
              to account for variations, use regex: "[Ss]pam (and|&) [Ee]ggs?"

              N.B. If keyword contains special characters, be sure to escape them!!!
          ignore_case (bool): if True, ignore letter case in `keyword` matching
          window_width (int): number of characters on either side of
              `keyword` to include as "context"
          print_only (bool): if True, print out all results with nice
              formatting; if False, return all (pre, kw, post) matches as generator
              of raw strings

      Returns:
          generator(Tuple[str, str, str]), or None
      """
      flags = re.IGNORECASE if ignore_case is True else 0
      if print_only is True:
          for match in re.finditer(keyword, text, flags=flags):
              line = '{pre} {kw} {post}'.format(
                  pre=text[max(0, match.start() - window_width): match.start()].rjust(window_width),
                  kw=match.group(),
                  post=text[match.end(): match.end() + window_width].ljust(window_width))
              print(line)
      else:
          return ((text[max(0, match.start() - window_width): match.start()],
                   match.group(),
                   text[match.end(): match.end() + window_width])
                  for match in re.finditer(keyword, text, flags=flags))


  print(keyword_in_context(dalloway, 'blue'))
#+END_SRC

#+RESULTS:
#+begin_example
ster); a
touch of the bird about her, of the jay,  blue -green, light,
vivacious, though she was over fift
 rest of it;
wrapped in the soft mesh of the grey- blue  morning air, which, as
the day wore on, would unw
es after the superb
summer's day, with its almost  blue -black sky, its delphiniums, its
carnations, its a
light and the colour thinning and thickening
from  blue  to the green of a hollow wave, like plumes on hor
fountains were part of the pattern; the white and
 blue , barred with black branches.  Sounds made harmoni
e a length of green stuff
with a ceiling cloth of  blue  and pink smoke high above, and there
was a rampar
r Walsh and
Clarissa, sitting side by side on the  blue  sofa, challenged each
other.  His powers chafed a
ings which breasted the air bravely for a
moment;  blue , circular--I shall try and get a word alone with

en him a long,
gushing letter quite lately about " blue  hydrangeas."  It was seeing
blue hydrangeas that 
te lately about "blue hydrangeas."  It was seeing
 blue  hydrangeas that made her think of him and the old
ing up
clean beech trees and issuing in a tuft of  blue  smoke among the
topmost leaves.  "And if some one
embling globes of cow parsley to see the sky;
the  blue , the steadfast, the blazing summer sky.

Aware th
 For the Dalloways, in general, were fair-haired;  blue -eyed;
Elizabeth, on the contrary, was dark; had C
 of a glacier the ice holds a splinter of
bone, a  blue  petal, some oak trees, and rolls them on.

But it
 screen in front of him, with black bulrushes and  blue 
swallows.  Where he had once seen mountains, wher
r old woman who guarded
her with her honest light- blue  eyes fixed on the door.  (They
wouldn't bring him
, enthusiastic goose! thought of HIM when she saw  blue 
hydrangeas).  She had influenced him more than an
 house. . . .

Oh it was a letter from her!  This  blue  envelope; that was her
hand.  And he would have t
ade her rounds at dawn sniffing, peering, causing  blue -
nosed maids to scour, for all the world as if th
r print dress and white apron to
array herself in  blue  and pearls, the day changed, put off stuff,
took 
tures.  It
sharpened, it refined them, the yellow- blue  evening light; and on
the leaves in the square sh
eyes (only one was glass) slowly
deepened, became  blue , beheld, not human beings--she had no tender
memo
looked very distinguished, with his grey hair
and  blue  eyes, said yes; they had not been able to resist 
None
#+end_example

Maybe will have to roll my own Key Words in Context class. 

** TODO annotate Dalloway in TEI, use that as training data
:LOGBOOK:
CLOCK: [2019-08-20 mar 16:22]--[2019-08-20 mar 16:47] =>  0:25
CLOCK: [2019-08-20 mar 16:47]--[2019-08-20 mar 17:17] =>  0:30
:END:

#+BEGIN_SRC python :results file :session session_init
def annotateColors(text):
  matchLocs = {}
  for item in xkcdMap:
    # print(item)
    pattern = '[\b\s]+' + item.replace(' ', '[-\s+]') + '[\b\s]+'
    matches = re.finditer(pattern, text, flags=re.IGNORECASE)
    matchStarts =  [match.start() for match in matches if matches is not None]
    if matchStarts != []: 
      matchLocs[item] = len(matchStarts)
    # print(pattern)
    color = xkcdMap[item]
    replacement = ' <span class="color" style="color: {}">{}</span> '.format(color, item)
    # print(replacement)

    text = re.sub(pattern, replacement, text, flags=re.IGNORECASE)
  return text, matchLocs

def chunk(text, n=10): 
  """ Split a text into N equal parts. """
  chunkSize = round(len(text)/n)
  return [text[i:i + chunkSize] for i in range(0, len(text), chunkSize)][:-1]

testText = "There was a color like blue and then another like red and one called light blue green."
# print(annotateColors(dalloway)[:20000])
dalloway = open('dalloway.html').read()
dallowayChunks = chunk(dalloway)
#print([len(chunk) for chunk in dallowayChunks])
df = pd.DataFrame([annotateColors(chunk)[1] for chunk in dallowayChunks])
subset = ['red', 'orange', 'yellow', 'green', 'blue', 'black', 'white']
df.fillna(0).plot(kind='area')
plt.savefig('out.png')
# annotated, matchLocs = annotateColors(dalloway)
#open('dalloway-annotated.html', 'w').write(annotated)
# print(matchLocs)
# html = '<html><body style="background-color: #34373a; color: #999">{}</body></html>'.format(annotated)
#+END_SRC

#+RESULTS:

** Virtualenv setup
#+begin_src sh
echo $VIRTUAL_ENV
#+end_src

#+RESULTS:
: /home/jon/.local/share/virtualenvs/04-colors-ZEWMFy_F

#+BEGIN_SRC elisp :session venv
(pyvenv-workon "04-colors-ZEWMFy_F")
#+END_SRC

#+BEGIN_SRC elisp :session venv
(setq evil-auto-indent nil) ; prevent weirdness with `o` and `O`
#+END_SRC

#+RESULTS:

** TODO make color annotator in python
#+BEGIN_SRC python :results output :session session_init2
import pandas as pd
import matplotlib.pyplot as plt
import re
import altair as alt
from matplotlib.colors import to_rgb, rgb_to_hsv
#+END_SRC

#+RESULTS:

#+BEGIN_SRC python :results output :session session_init2
dalloway = open('data/text/dalloway.txt', errors='ignore').read()
xkcdMapRaw = open('data/maps/xkcd/rgb.txt').readlines()[1:]

def makeXkcdMap(xkcdMapRaw):
    """
    Makes a color dictionary, e.g. {"blue": "#0000ff"}
    from the XKCD data set.
    """
    xkcdMap = {}
    for line in xkcdMapRaw:
        splitLine = line.split('\t')
        if len(splitLine) != 3:
            print('error on: ', splitLine)
        else:
            name, val, _ = line.split('\t')
            xkcdMap[name] = val
    return xkcdMap

xkcdMap = makeXkcdMap(xkcdMapRaw)
#+END_SRC

#+RESULTS:

#+BEGIN_SRC python :results output :session session_init2
def annotateColors(text):
    matchLocs = {}
    for item in xkcdMap:
        wordBoundary = '[\b\s\W]+'
        pattern = wordBoundary + item.replace(' ', '[-\s+]') + wordBoundary
        matches = re.finditer(pattern, text, flags=re.IGNORECASE)
        matchStarts =  [match.start() for match in matches if matches is not None]
        if matchStarts != []:
            matchLocs[item] = (len(matchStarts), matchStarts)
            color = xkcdMap[item]
            replacement = ' <span class="color" style="color: {}">{}</span> '.format(color, item)
            text = re.sub(pattern, replacement, text, flags=re.IGNORECASE)
    return text, matchLocs

def chunk(text, n=10):
    """ Split a text into N equal parts. """
    chunkSize = round(len(text)/n)
    return [text[i:i + chunkSize] for i in range(0, len(text), chunkSize)][:-1]

def count(text, nChunks=20):
    chunks = chunk(text, nChunks)
    df = pd.DataFrame([annotateColors(chunk)[1] for chunk in chunks])
    return df.fillna(0)

def melt(df):
    df['chunk']=df.index
    return df.melt(id_vars='chunk', var_name='color', value_name='count')

def plotM(df, nColors=10):
    """ Plots with matplotlib, via pandas. """
    df.plot(kind='area', stacked=True, color=["xkcd:"+color for color in topColors], figsize=(12,8))

def plotA(df):
    df['hex'] = df['color'].apply(lambda x: xkcdMap[x])
    df['hsv'] = df['hex'].apply(lambda x: rgb_to_hsv(to_rgb(x))[0])
    df = df.sort_values('hsv') # Sloppy alphabetical color sort
    return alt.Chart(df, width=800, height=600).mark_area().encode(
        x='chunk:O', y='count:Q', color=alt.Color('hex', scale=None), tooltip='color')

def topColors(df, nColors=10):
    topColors = list(df.sum().sort_values(ascending=False)[:nColors].index)
    return df[topColors]

df = count(dalloway, nChunks=40)

    #print('heyo!')

# plotA(melt(topColors(df))).save('dalloway.html')
#+END_SRC

#+RESULTS:

#+BEGIN_SRC python :results output :session session_init2
text, matches = annotateColors(dalloway) 
#+END_SRC

#+RESULTS:

#+BEGIN_SRC python :results output :session session_init2
print(matches)
#+END_SRC
#+RESULTS:
: {'dust': (3, [25615, 82641, 299399]), 'tea': (16, [105629, 106487, 154024, 160982, 164471, 165110, 169532, 193173, 205242, 238450, 239636, 239704, 240907, 242048, 243089, 327154]), 'spruce': (1, [95804]), 'desert': (6, [104178, 127305, 127418, 164349, 164404, 179639]), 'swamp': (2, [148381, 183481]), 'fern': (1, [119925]), 'straw': (9, [15531, 15564, 89425, 89438, 139995, 152345, 209712, 265295, 293501]), 'leather': (5, [13934, 47628, 48126, 157300, 164064]), 'hazel': (2, [22053, 154182]), 'ice': (4, [95687, 149593, 257784, 309062]), 'ruby': (2, [56968, 352562]), 'dark': (20, [13882, 19349, 25090, 39333, 47094, 56619, 78936, 79024, 83344, 102941, 107931, 227900, 280946, 282995, 292644, 292840, 294330, 296581, 318634, 348975]), 'twilight': (1, [102589]), 'royal': (2, [4847, 133351]), 'leaf': (8, [7308, 17972, 75120, 119901, 119938, 127013, 127284, 212309]), 'carnation': (2, [86627, 95779]), 'pale': (10, [19731, 22229, 28376, 29575, 98221, 104192, 145865, 165101, 229164, 349878]), 'heather': (1, [151288]), 'dusk': (2, [289642, 297316]), 'vivid green': (1, [117733]), 'sandy': (2, [257327, 257548]), 'sea': (19, [4207, 10401, 47171, 52371, 70410, 81647, 104351, 105049, 126778, 152302, 239571, 264292, 267960, 276814, 281971, 282200, 305212, 326273, 343812]), 'fawn': (2, [254911, 255183]), 'pea': (1, [14458]), 'stone': (11, [44978, 48004, 52140, 62779, 171156, 185208, 204019, 257164, 257173, 278815, 307330]), 'deep orange': (1, [20271]), 'earth': (12, [94367, 105389, 126351, 150851, 151930, 152343, 152440, 218772, 262394, 317981, 324607, 342587]), 'golden': (1, [261961]), 'cherry': (1, [20474]), 'midnight': (2, [40860, 355521]), 'blood': (8, [17834, 58061, 173434, 174286, 188505, 191423, 217800, 342612]), 'rouge': (3, [133527, 317069, 317168]), 'mulberry': (4, [18866, 21400, 23117, 26724]), 'copper': (2, [309248, 309328]), 'coffee': (5, [196907, 198755, 202346, 203157, 203893]), 'silver': (20, [68064, 68088, 68250, 68494, 68539, 68929, 74482, 78467, 78480, 84314, 154091, 177767, 196729, 206973, 213380, 312719, 314113, 315578, 331369, 347245]), 'bronze': (2, [33234, 357470]), 'ocean': (1, [179068]), 'blush': (1, [56295]), 'lemon': (1, [28958]), 'apricot': (1, [339015]), 'forest': (2, [18285, 106647]), 'reddish': (1, [292463]), 'bright yellow': (2, [265076, 265140]), 'mud': (2, [131111, 188664]), 'sky': (28, [20231, 33690, 33916, 34167, 34328, 34400, 34796, 34892, 36768, 39039, 87028, 104944, 105549, 106876, 125222, 129854, 157644, 214384, 214433, 232368, 308689, 355194, 355395, 355405, 355582, 355607, 355648, 365515]), 'red brown': (1, [41535]), 'chocolate': (2, [251162, 251330]), 'grass': (13, [8236, 26613, 81876, 85582, 124645, 131099, 134086, 153500, 170083, 212823, 221900, 230003, 346661]), 'moss': (1, [120659]), 'wine': (2, [199308, 306684]), 'bright red': (1, [19153]), 'greenish': (1, [322084]), 'coral': (1, [171138]), 'cream': (3, [196228, 199299, 318095]), 'brick': (2, [191482, 212345]), 'white': (58, [1746, 12515, 18049, 20119, 20546, 20727, 28391, 29952, 29988, 30262, 30840, 34059, 34412, 34995, 35978, 39022, 40667, 41593, 43297, 50999, 55439, 63008, 66247, 92142, 98279, 99877, 102186, 102206, 108627, 114417, 117753, 131847, 171202, 190783, 198917, 220228, 224020, 224430, 226347, 243896, 247186, 251492, 257063, 260477, 266076, 266819, 286855, 291735, 300927, 310142, 312863, 316531, 326530, 333014, 344636, 355695, 364067, 364945]), 'crimson': (1, [119297]), 'grey blue': (1, [3698]), 'bright pink': (1, [112531]), 'blue green': (1, [1673]), 'gold': (13, [27357, 133066, 163770, 182398, 182460, 221876, 247164, 269302, 270034, 270702, 334557, 335314, 338659]), 'navy': (3, [245768, 250583, 262806]), 'rose': (21, [35062, 39465, 52942, 55724, 70058, 78112, 79938, 80175, 88832, 125084, 130837, 134813, 144957, 145031, 213641, 241921, 257966, 277930, 282961, 361215, 364601]), 'black': (17, [18214, 20619, 23930, 40091, 97250, 99594, 104059, 116750, 135326, 137498, 159001, 269642, 275252, 282818, 330176, 344918, 351143]), 'lilac': (3, [19626, 20001, 20926]), 'salmon': (8, [15625, 192467, 192539, 195714, 324218, 324230, 324363, 324576]), 'olive': (1, [339381]), 'violet': (3, [20551, 21191, 142425]), 'grey': (38, [3788, 21457, 22630, 22738, 30250, 43235, 50704, 86070, 106717, 108060, 108159, 126195, 135388, 135635, 136837, 161694, 183273, 183410, 183593, 183629, 183696, 185636, 196706, 210081, 210378, 226196, 261726, 266382, 266485, 272219, 272325, 304896, 317820, 341120, 345273, 354789, 357373, 357837]), 'yellow': (15, [57537, 102508, 113570, 128463, 217367, 218449, 220905, 228290, 264261, 273774, 273936, 318547, 324959, 331845, 349339]), 'orange': (1, [21398]), 'light blue': (1, [296127]), 'red': (31, [19598, 20504, 21345, 24653, 43697, 85088, 101500, 101667, 103834, 128653, 132598, 133421, 158941, 166485, 166788, 169153, 180749, 181976, 204663, 205147, 217938, 225856, 232221, 261401, 264699, 289706, 316464, 317485, 348911, 358717, 372698]), 'brown': (10, [24127, 43947, 51488, 62779, 161456, 164685, 205621, 210492, 255285, 255842]), 'pink': (22, [8512, 25036, 46130, 65449, 65872, 69807, 73753, 86023, 115142, 166598, 188821, 192974, 213778, 235565, 246767, 257114, 304709, 320955, 329930, 335799, 336485, 385171]), 'blue': (23, [1715, 3842, 21057, 40488, 41151, 46219, 84607, 109115, 142208, 142242, 163387, 223876, 243122, 274869, 288671, 298748, 304468, 306684, 307582, 320568, 322018, 355559, 363595]), 'green': (28, [1769, 4554, 17619, 25030, 38654, 40696, 46428, 55097, 58202, 71519, 71708, 75630, 78249, 86862, 111750, 125828, 129230, 161390, 168915, 170534, 186345, 224297, 230843, 244185, 282919, 347647, 355286, 360659]), 'purple': (2, [161899, 328406])}

** DONE rewrite in Haskell? 
CLOSED: [2020-02-11 mar 12:24]
:LOGBOOK:
CLOCK: [2019-09-25 mer 16:01]--[2019-09-25 mer 17:01] =>  1:00
CLOCK: [2019-08-22 ĵaŭ 16:00]--[2019-08-22 ĵaŭ 16:55] =>  0:55
CLOCK: [2019-08-22 ĵaŭ 00:00]--[2019-08-22 ĵaŭ 00:43] =>  0:43
:END:

Well this works a bit. Needs library: regex-compat

#+BEGIN_SRC haskell :results output :session session_init
import Text.Regex (subRegex, mkRegex)
import Data.List (intercalate)

s = "I have several paints. For example, red, green, and blue, and blue-green."
replaceAllIn = foldl (\acc (k, v) -> subRegex (mkRegex k) acc v)

-- replaceAllIn s [("\\bblue\\b", "XXX"), ("red", "XXX")]

makeSpan color = "<span type=\"color\">" ++ color ++ "</span>"

putStrLn "hi!"

makePat color = "\\b" ++ (intercalate "[\\n -]" $ words color) ++ "\\b"

makePat "blue green"

colors = ["blue green", "blue", "green"]
patSpan color = ((makePat color), (makeSpan color))

pairs = map patSpan colors
replaceAllIn s pairs
show pairs
#+END_SRC

#+RESULTS:
: 
: Prelude Text.Regex Data.List> Prelude Text.Regex Data.List> Prelude Text.Regex Data.List> Prelude Text.Regex Data.List> Prelude Text.Regex Data.List> Prelude Text.Regex Data.List> Prelude Text.Regex Data.List> Prelude Text.Regex Data.List> hi!
: Prelude Text.Regex Data.List> Prelude Text.Regex Data.List> Prelude Text.Regex Data.List> "\\bblue[\\n -]green\\b"
: Prelude Text.Regex Data.List> Prelude Text.Regex Data.List> Prelude Text.Regex Data.List> Prelude Text.Regex Data.List> Prelude Text.Regex Data.List> "I have several paints. For example, red, <span type=\"color\">green</span>, and <span type=\"color\">blue</span>, and <span type=\"color\"><span type=\"color\">blue</span> <span type=\"color\">green</span></span>."

** DONE write web app
CLOSED: [2020-02-17 lun 18:11]

#+BEGIN_SRC elisp :session venv
(pyvenv-workon "Projects-Pkl0VwTn")
#+END_SRC

#+RESULTS:

#+BEGIN_SRC python :results output :session venv
  # import plotly.plotly as py
  import plotly.graph_objs as go
  import plotly.offline as po

  trace = go.Sunburst(
      labels=["Steve", "Carl", "Seth", "Enos", "Noam", "Abel", "Awan", "Enoch", "Azura"],
      parents=["", "Eve", "Eve", "Seth", "Seth", "Eve", "Eve", "Awan", "Eve" ],
      values=[10, 14, 12, 10, 2, 6, 6, 4, 4],
      outsidetextfont = {"size": 20, "color": "#377eb8"},
      marker = {"line": {"width": 2}},
  )

  layout = go.Layout(
      margin = go.layout.Margin(t=0, l=0, r=0, b=0)
  )

  po.plot(go.Figure([trace], layout), filename='basic_sunburst_chart.html')
  print('heyo!')
#+END_SRC

#+RESULTS:
: Traceback (most recent call last):
:   File "<stdin>", line 1, in <module>
:   File "/tmp/babel-hwqqDb/python-T9acqS", line 2, in <module>
:     import plotly.graph_objs as go
: ModuleNotFoundError: No module named 'plotly'

** DONE write color categorizer
CLOSED: [2020-02-17 lun 19:49]

Example from [[http://hanzratech.in/2015/01/16/color-difference-between-2-colors-using-python.html][this blog post on how to calculate color difference]]

#+BEGIN_SRC python :results output :session session_init2
from colormath.color_objects import sRGBColor, LabColor
from colormath.color_conversions import convert_color
from colormath.color_diff import delta_e_cie2000

# Red Color
color1_rgb = sRGBColor(1.0, 0.0, 0.0);

# Blue Color
color2_rgb = sRGBColor(0.0, 0.0, 1.0);

# Convert from RGB to Lab Color Space
color1_lab = convert_color(color1_rgb, LabColor);

# Convert from RGB to Lab Color Space
color2_lab = convert_color(color2_rgb, LabColor);

# Find the color difference
delta_e = delta_e_cie2000(color1_lab, color2_lab);

print("The difference between the 2 color = ", delta_e)

#+END_SRC

#+RESULTS:
: Python 3.7.5 (default, Oct 14 2019, 23:08:55) 
: [GCC 8.3.0] on linux
: Type "help", "copyright", "credits" or "license" for more information.
: The difference between the 2 color =  52.88009898346556

#+BEGIN_SRC python :results output :session session_init2
from colormath.color_objects import sRGBColor, LabColor
from colormath.color_conversions import convert_color
from colormath.color_diff import delta_e_cie2000

def colorDelta(colorAHex, colorBHex):
    """ Compute delta-E measure of color difference,
    using the CIE Lab color space.
    """
    srgbA = sRGBColor.new_from_rgb_hex(colorAHex)
    srgbB = sRGBColor.new_from_rgb_hex(colorBHex)

    colorAlab = convert_color(srgbA, LabColor);
    colorBlab = convert_color(srgbB, LabColor);

    return delta_e_cie2000(colorAlab, colorBlab)

# print(colorDelta('#ff0000', '#00ff00'))

baseColors = ["red", "orange", "yellow", "green", "blue",
              "violet", "grey", "brown", "black", "white"]

baseColorMap = {"red": "#FF0000", "orange": "#FFA500", 
                "yellow": "#FFFF00", "green": "#00FF00", 
                "blue": "#0000FF", "violet": "#EE82EE",
                "grey": "#BEBEBE", "brown": "#A52A2A",
                "black": "#000000", "white": "#FFFFFF"}

baseColorMap = {color: xkcdMap.get(color) for color in baseColorMap.keys()}

def closestColor(colorHex, baseColorMap): 
    scores = {colorDelta(colorHex, baseHex): word
              for word, baseHex in baseColorMap.items()}
    return scores[min(scores)]

# Indian red. Should return red. 
print(closestColor('#CD5C5C', baseColorMap))

# Dark orange
print(closestColor('#FF8C00', baseColorMap))

# Olive drab. 
print(closestColor('#6B8E23', baseColorMap))
#+END_SRC

#+RESULTS:
: red
: orange
: green

Colors from [[data/maps/dilumr-color-names/wikipedia_x11_colors.csv]]
Privileging mathematically simple colors here (#FF0000) 

#+BEGIN_SRC csv
"Red !Red","#FF0000",255,0,0,0.0,100.0,50.0
"Orange !Orange","#FFA500",255,165,0,39.0,100.0,50.0
"Yellow !Yellow","#FFFF00",255,255,0,60.0,100.0,50.0
"Green !Green","#00FF00",0,255,0,120.0,100.0,50.0
"Blue !Blue","#0000FF",0,0,255,240.0,100.0,50.0
"Violet !Violet","#EE82EE",238,130,238,300.0,76.0,72.0
"Gray !Gray","#BEBEBE",190,190,190,0.0,0.0,75.0
"Brown !Brown","#A52A2A",165,42,42,0.0,59.0,41.0
"Black !Black","#000000",0,0,0,0.0,0.0,0.0
"White !White","#FFFFFF",255,255,255,0.0,0.0,100.0
#+END_SRC

#+RESULTS:
: 86.60838088768512

** Categorize matches from color annotator above

Matches are now in the form ~{"blue": (3, [45, 67, 235123])}~
where ~3~ is the number of matches, and the following list is the locations. 

Make a table like this: 

| color      | parent | hex     | parentHex | n | locations       |
|------------+--------+---------+-----------+---+-----------------|
| light blue | blue   | #0000FF | #0000FF   | 3 | [45, 36, 34534] |



#+BEGIN_SRC python :results output :session session_init2
def matchesToDf(matches):
    occurrences = [val[0] for val in matches.values()]
    locations = [val[1] for val in matches.values()]
    names = matches.keys()
    df = pd.DataFrame([names, occurrences, locations], index = ['name', 'n', 'locs']).T
    #print(df)
    return df

df = matchesToDf(matches)
#+END_SRC

#+RESULTS:

#+BEGIN_SRC python :results output :session session_init2
print(df) 

#+END_SRC

#+RESULTS:
#+begin_example
name   n                                               locs
0     dust   3                             [25615, 82641, 299399]
1      tea  16  [105629, 106487, 154024, 160982, 164471, 16511...
2   spruce   1                                            [95804]
3   desert   6   [104178, 127305, 127418, 164349, 164404, 179639]
4    swamp   2                                   [148381, 183481]
..     ...  ..                                                ...
74   brown  10  [24127, 43947, 51488, 62779, 161456, 164685, 2...
75    pink  22  [8512, 25036, 46130, 65449, 65872, 69807, 7375...
76    blue  23  [1715, 3842, 21057, 40488, 41151, 46219, 84607...
77   green  28  [1769, 4554, 17619, 25030, 38654, 40696, 46428...
78  purple   2                                   [161899, 328406]

[79 rows x 3 columns]
#+end_example


Look up the name in the map. 

#+BEGIN_SRC python :results output :session session_init2
df['hex'] = df['name'].apply(xkcdMap.get)
print(df)
#+END_SRC

#+RESULTS:
#+begin_example
name   n                                               locs      hex
0     dust   3                             [25615, 82641, 299399]  #b2996e
1      tea  16  [105629, 106487, 154024, 160982, 164471, 16511...  #65ab7c
2   spruce   1                                            [95804]  #0a5f38
3   desert   6   [104178, 127305, 127418, 164349, 164404, 179639]  #ccad60
4    swamp   2                                   [148381, 183481]  #698339
..     ...  ..                                                ...      ...
74   brown  10  [24127, 43947, 51488, 62779, 161456, 164685, 2...  #653700
75    pink  22  [8512, 25036, 46130, 65449, 65872, 69807, 7375...  #ff81c0
76    blue  23  [1715, 3842, 21057, 40488, 41151, 46219, 84607...  #0343df
77   green  28  [1769, 4554, 17619, 25030, 38654, 40696, 46428...  #15b01a
78  purple   2                                   [161899, 328406]  #7e1e9c

[79 rows x 4 columns]
#+end_example

#+BEGIN_SRC python :results output :session session_init2
df['parent'] = df['hex'].apply(lambda hex: closestColor(hex, baseColorMap))
print(df)
#+END_SRC

#+RESULTS:
#+begin_example
name   n                                               locs      hex  parent
0     dust   3                             [25615, 82641, 299399]  #b2996e    grey
1      tea  16  [105629, 106487, 154024, 160982, 164471, 16511...  #65ab7c   green
2   spruce   1                                            [95804]  #0a5f38   green
3   desert   6   [104178, 127305, 127418, 164349, 164404, 179639]  #ccad60    grey
4    swamp   2                                   [148381, 183481]  #698339   green
..     ...  ..                                                ...      ...     ...
74   brown  10  [24127, 43947, 51488, 62779, 161456, 164685, 2...  #653700   brown
75    pink  22  [8512, 25036, 46130, 65449, 65872, 69807, 7375...  #ff81c0    grey
76    blue  23  [1715, 3842, 21057, 40488, 41151, 46219, 84607...  #0343df    blue
77   green  28  [1769, 4554, 17619, 25030, 38654, 40696, 46428...  #15b01a   green
78  purple   2                                   [161899, 328406]  #7e1e9c  violet

[79 rows x 5 columns]
#+end_example

#+BEGIN_SRC python :results output :session session_init2
df['parentHex'] = df['parent'].apply(baseColorMap.get)
print(df)
#+END_SRC

#+RESULTS:
#+begin_example
name   n  ...  parent parentHex
0     dust   3  ...    grey   #929591
1      tea  16  ...   green   #15b01a
2   spruce   1  ...   green   #15b01a
3   desert   6  ...    grey   #929591
4    swamp   2  ...   green   #15b01a
..     ...  ..  ...     ...       ...
74   brown  10  ...   brown   #653700
75    pink  22  ...    grey   #929591
76    blue  23  ...    blue   #0343df
77   green  28  ...   green   #15b01a
78  purple   2  ...  violet   #9a0eea

[79 rows x 6 columns]
#+end_example

#+BEGIN_SRC python :results output :session session_init2
df.to_csv('dalloway-colors.csv')
#+END_SRC

#+RESULTS:

*** Append parents so that they show up as nodes, too. 

#+BEGIN_SRC python :results output :session session_init2
print(baseColorMap)
#+END_SRC

#+RESULTS:
: {'red': '#e50000', 'orange': '#f97306', 'yellow': '#ffff14', 'green': '#15b01a', 'blue': '#0343df', 'violet': '#9a0eea', 'grey': '#929591', 'brown': '#653700', 'black': '#000000', 'white': '#ffffff'}

#+BEGIN_SRC python :results output :session session_init2
baseDf = pd.DataFrame(baseColorMap.items(), columns=['name', 'hex'])
baseDf['parent'] = "colors" # Ur-color
baseDf['parentHex'] = baseDf['hex']
baseDf['locs'] = ""
print(baseDf)
#+END_SRC

#+RESULTS:
#+begin_example
name      hex  parent parentHex locs
0     red  #e50000  colors   #e50000     
1  orange  #f97306  colors   #f97306     
2  yellow  #ffff14  colors   #ffff14     
3   green  #15b01a  colors   #15b01a     
4    blue  #0343df  colors   #0343df     
5  violet  #9a0eea  colors   #9a0eea     
6    grey  #929591  colors   #929591     
7   brown  #653700  colors   #653700     
8   black  #000000  colors   #000000     
9   white  #ffffff  colors   #ffffff
#+end_example

Get the totals for all the parent colors.

#+BEGIN_SRC python :results output :session session_init2
totals = df.groupby(['parent'])['n'].sum()
#+END_SRC

#+RESULTS:

#+BEGIN_SRC python :results output :session session_init2
dict(totals)
#+END_SRC

#+RESULTS:
: {'black': 44, 'blue': 28, 'brown': 25, 'green': 74, 'grey': 108, 'orange': 25, 'red': 79, 'violet': 12, 'white': 121, 'yellow': 46}

#+BEGIN_SRC python :results output :session session_init2
baseDf['n'] = baseDf['name'].apply(dict(totals).get)
#+END_SRC

#+RESULTS:

#+BEGIN_SRC python :results output :session session_init2
baseDf
#+END_SRC

#+RESULTS:
#+begin_example
name      hex  parent parentHex locs    n
0     red  #FF0000  colors   #FF0000        44
1  orange  #FFA500  colors   #FFA500        42
2  yellow  #FFFF00  colors   #FFFF00        33
3   green  #00FF00  colors   #00FF00        52
4    blue  #0000FF  colors   #0000FF        34
5  violet  #EE82EE  colors   #EE82EE        29
6    grey  #BEBEBE  colors   #BEBEBE       139
7   brown  #A52A2A  colors   #A52A2A        70
8   black  #000000  colors   #000000        47
9   white  #FFFFFF  colors   #FFFFFF        72
#+end_example

#+BEGIN_SRC python :results output :session session_init2
dfAll = df.append(baseDf)
#+END_SRC

#+RESULTS:

#+BEGIN_SRC python :results output :session session_init2
dfAll.to_csv('dalloway-colors.csv')
#+END_SRC

#+RESULTS:

** DONE Make sunburst chart from data
CLOSED: [2020-02-17 lun 19:50]

*** Example 1: PX
This example from [[https://plot.ly/python/sunburst-charts/][the Plotly documentation]] doesn't seem to work. Maybe I need a newer version? 

#+BEGIN_SRC python :results output :session session_init
import plotly.express as px
data = dict(
    character=["Eve", "Cain", "Seth", "Enos", "Noam", "Abel", "Awan", "Enoch", "Azura"],
    parent=["", "Eve", "Eve", "Seth", "Seth", "Eve", "Eve", "Awan", "Eve" ],
    value=[15, 8 , 6, 4, 0, 2,11, 4,11])

fig =px.sunburst(
    data,
    names='character',
    parents='parent',
    values='value',
)
fig.show()
#+END_SRC

#+RESULTS:
: Traceback (most recent call last):
:   File "<stdin>", line 1, in <module>
:   File "/tmp/babel-DFGiVW/python-LHOYbH", line 1, in <module>
:     import plotly.express as px
: ModuleNotFoundError: No module named 'plotly'

*** Example 2: GO
But this one does: 
And the chart opens in the browser: 

#+BEGIN_SRC python :results output :session session_init2
import plotly.graph_objects as go

fig =go.Figure(go.Sunburst(
    # labels = ['coffee', 'silver', 'bronze', 'orange', 'grey', 'orange'],
    # parents = ['orange', 'grey', 'orange', '', '', ''] ,
    # values = [5, 20, 2, 5, 20, 2]
    labels=["Eveline", "Cain", "Seth", "Enos", "Noam", "Abel", "Awan", "Enoch", "Azura"],
    parents=["", "Eveline", "Eveline", "Seth", "Seth", "Eveline", "Eveline", "Awan", "Eveline" ],
    values=[10, 14, 12, 10, 2, 6, 6, 4, 4],
))
# Update layout for tight margin
# See https://plot.ly/python/creating-and-updating-figures/
fig.update_layout(margin = dict(t=0, l=0, r=0, b=0))

fig.show()
#+END_SRC

#+RESULTS:
#+begin_example
Python 3.7.5 (default, Oct 14 2019, 23:08:55) 
[GCC 8.3.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
11:53:10 ERROR: Error while loading config.py
Traceback (most recent call last):
  File "/nix/store/w2jvkmmykaidfz4xpc7vc4w40gffqza0-qutebrowser-1.10.0/lib/python3.7/site-packages/qutebrowser/config/configinit.py", line 67, in early_init
    configfiles.read_config_py(config_file)
  File "/nix/store/w2jvkmmykaidfz4xpc7vc4w40gffqza0-qutebrowser-1.10.0/lib/python3.7/site-packages/qutebrowser/config/configfiles.py", line 743, in read_config_py
    raise configexc.ConfigFileErrors('config.py', api.errors)
qutebrowser.config.configexc.ConfigFileErrors: Errors occurred while reading config.py:
  While setting 'fonts.monospace': No option 'fonts.monospace'
11:53:10 INFO: Opening in existing instance
#+end_example

*** Attempt 1: GO. NG
#+BEGIN_SRC python :results output :session session_init2 :tangle
import plotly.graph_objects as go
import pandas as pd

df = pd.read_csv('dalloway-colors.csv')
dfSubset = df.iloc[34:37]

labels = list(dfSubset['name'])
parents = list(dfSubset['parent'])
values= list(dfSubset['0'])

print(labels, parents, values)

urNode = ["colors"]
# Parents are nodes too
labels = urNode + parents + labels
parents = [""] + ["colors"]*len(parents) + parents

# Parents need counts, too. Use their parents' counts
values = values + values

print(labels, parents, values)

fig =go.Figure(go.Sunburst(
    labels = labels,
    parents = parents,
    values= values
))
# Update layout for tight margin
# See https://plot.ly/python/creating-and-updating-figures/
fig.update_layout(margin = dict(t=0, l=0, r=0, b=0))

fig.show()
#+END_SRC

#+RESULTS:
#+begin_example
Python 3.7.5 (default, Oct 14 2019, 23:08:55) 
[GCC 8.3.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
['coffee', 'silver', 'bronze'] ['orange', 'grey', 'orange'] [5, 20, 2]
['colors', 'orange', 'grey', 'orange', 'coffee', 'silver', 'bronze'] ['', 'colors', 'colors', 'colors', 'orange', 'grey', 'orange'] [5, 20, 2, 5, 20, 2]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/tmp/babel-d4zWHP/python-Xoh394", line 32, in <module>
    fig.save('out.html')
AttributeError: 'Figure' object has no attribute 'save'
>>> >>> >>> 'org_babel_python_eoe'
#+end_example

*** Read CSV
#+BEGIN_SRC python :results output :session session_init
import plotly.graph_objects as go
import pandas as pd
import plotly.express as px

df = pd.read_csv('dalloway-colors.csv')
df.fillna("")
#+END_SRC

#+RESULTS:

#+BEGIN_SRC python :results output :session session_init
print(df)
#+END_SRC

Make ids

#+BEGIN_SRC python :results output :session session_init
df['ids'] = df['parent'] + '-' + df['name']
#+END_SRC

#+RESULTS:

*** DONE Attempt 2: PX
CLOSED: [2020-02-17 lun 19:50]


#+BEGIN_SRC python :results output :session session_init
dfSubset = df.iloc[:10]
#+END_SRC

#+RESULTS:

#+BEGIN_SRC python :results output :session session_init
print(dfSubset[['name', 'hex', 'n', 'parent', 'parentHex']].to_csv())
#+END_SRC

#+RESULTS:
#+begin_example
,name,hex,n,parent,parentHex
0,dust,#b2996e,3,orange,#FFA500
1,tea,#65ab7c,16,grey,#BEBEBE
2,spruce,#0a5f38,1,black,#000000
3,desert,#ccad60,6,orange,#FFA500
4,swamp,#698339,2,grey,#BEBEBE
5,fern,#63a950,1,green,#00FF00
6,straw,#fcf679,9,yellow,#FFFF00
7,leather,#ac7434,5,orange,#FFA500
8,hazel,#8e7618,2,orange,#FFA500
9,ice,#d6fffa,4,white,#FFFFFF
#+end_example

#+BEGIN_SRC python :results output :session session_init
colorMapSubset = {row['name']: row['hex'] for i, row in dfSubset.iterrows()}
print(colorMapSubset)
#+END_SRC

#+RESULTS:
: {'dust': '#b2996e', 'tea': '#65ab7c', 'spruce': '#0a5f38', 'desert': '#ccad60', 'swamp': '#698339', 'fern': '#63a950', 'straw': '#fcf679', 'leather': '#ac7434', 'hazel': '#8e7618', 'ice': '#d6fffa'}

#+begin_src python :results output :session session_init
fig = px.sunburst(dfSubset, path=['parent', 'name'], values='n', color='name', color_discrete_map=colorMapSubset)
fig.show()
#+end_src

#+RESULTS:
: 16:06:43 ERROR: Error while loading config.py
: Traceback (most recent call last):
:   File "/nix/store/w2jvkmmykaidfz4xpc7vc4w40gffqza0-qutebrowser-1.10.0/lib/python3.7/site-packages/qutebrowser/config/configinit.py", line 67, in early_init
:     configfiles.read_config_py(config_file)
:   File "/nix/store/w2jvkmmykaidfz4xpc7vc4w40gffqza0-qutebrowser-1.10.0/lib/python3.7/site-packages/qutebrowser/config/configfiles.py", line 743, in read_config_py
:     raise configexc.ConfigFileErrors('config.py', api.errors)
: qutebrowser.config.configexc.ConfigFileErrors: Errors occurred while reading config.py:
:   While setting 'fonts.monospace': No option 'fonts.monospace'
: 16:06:43 INFO: Opening in existing instance

#+begin_src python :results output :session session_init
print(help(px.sunburst))
#+end_src

#+RESULTS:
#+begin_example
0     #b2996e
1     #65ab7c
2     #0a5f38
3     #ccad60
4     #698339
       ...   
74    #653700
75    #ff81c0
76    #0343df
77    #15b01a
78    #7e1e9c
Name: hex, Length: 79, dtype: object
#+end_example
*** Try again with IDs and Graph Objects

Ok, that seems to have worked 

#+begin_src python :results output :session session_init
import plotly.graph_objects as go
import pandas as pd

df = pd.read_csv('coffee-flavors.csv')

print(df)
#+end_src

#+RESULTS:
#+begin_example
ids        labels         parents
0         Enzymatic-Flowery       Flowery             NaN
1          Enzymatic-Fruity        Fruity             NaN
2           Enzymatic-Herby         Herby             NaN
3      Sugar Browning-Nutty         Nutty             NaN
4   Sugar Browning-Carmelly      Carmelly             NaN
..                      ...           ...             ...
82            Pungent-Thyme         Thyme   Spicy-Pungent
83             Smokey-Tarry         Tarry  Carbony-Smokey
84      Smokey-Pipe Tobacco  Pipe Tobacco  Carbony-Smokey
85               Ashy-Burnt         Burnt    Carbony-Ashy
86             Ashy-Charred       Charred    Carbony-Ashy

[87 rows x 3 columns]
#+end_example

#+begin_src python :results output :session session_init
  fig = go.Figure()

  fig.add_trace(go.Sunburst(
      ids=df.ids,
      labels=df.labels,
      parents=df.parents,
      domain=dict(column=1),
      #maxdepth=2,
      insidetextorientation='radial',
      marker = {"colors": ['#f00', '#003', '#00f']}
  ))

  fig.update_layout(
      margin = dict(t=10, l=10, r=10, b=10)
  )

  fig.show()
#+end_src

#+RESULTS:
: 16:53:15 ERROR: Error while loading config.py
: Traceback (most recent call last):
:   File "/nix/store/w2jvkmmykaidfz4xpc7vc4w40gffqza0-qutebrowser-1.10.0/lib/python3.7/site-packages/qutebrowser/config/configinit.py", line 67, in early_init
:     configfiles.read_config_py(config_file)
:   File "/nix/store/w2jvkmmykaidfz4xpc7vc4w40gffqza0-qutebrowser-1.10.0/lib/python3.7/site-packages/qutebrowser/config/configfiles.py", line 743, in read_config_py
:     raise configexc.ConfigFileErrors('config.py', api.errors)
: qutebrowser.config.configexc.ConfigFileErrors: Errors occurred while reading config.py:
:   While setting 'fonts.monospace': No option 'fonts.monospace'
: 16:53:15 INFO: Opening in existing instance

#+begin_src python :results output :session session_init
print(help(go.Sunburst))
#+end_src
*** Now with my own data

#+begin_src python :results output :session session_init
import plotly.graph_objects as go
import pandas as pd

df = pd.read_csv('dalloway-colors.csv')

df['id'] = df['parent'] + '-' + df['name']

# df['parent'] = df['parent'] + '-' + df['parent']

print(df)
#+end_src

#+RESULTS:
#+begin_example
Unnamed: 0    name   n  ...  parent parentHex             id
0            0    dust   3  ...    grey   #929591      grey-dust
1            1     tea  16  ...   green   #15b01a      green-tea
2            2  spruce   1  ...   green   #15b01a   green-spruce
3            3  desert   6  ...    grey   #929591    grey-desert
4            4   swamp   2  ...   green   #15b01a    green-swamp
..         ...     ...  ..  ...     ...       ...            ...
74          74   brown  10  ...   brown   #653700    brown-brown
75          75    pink  22  ...    grey   #929591      grey-pink
76          76    blue  23  ...    blue   #0343df      blue-blue
77          77   green  28  ...   green   #15b01a    green-green
78          78  purple   2  ...  violet   #9a0eea  violet-purple

[79 rows x 8 columns]
#+end_example


#+RESULTS:
: 16:58:08 ERROR: Error while loading config.py
: Traceback (most recent call last):
:   File "/nix/store/w2jvkmmykaidfz4xpc7vc4w40gffqza0-qutebrowser-1.10.0/lib/python3.7/site-packages/qutebrowser/config/configinit.py", line 67, in early_init
:     configfiles.read_config_py(config_file)
:   File "/nix/store/w2jvkmmykaidfz4xpc7vc4w40gffqza0-qutebrowser-1.10.0/lib/python3.7/site-packages/qutebrowser/config/configfiles.py", line 743, in read_config_py
:     raise configexc.ConfigFileErrors('config.py', api.errors)
: qutebrowser.config.configexc.ConfigFileErrors: Errors occurred while reading config.py:
:   While setting 'fonts.monospace': No option 'fonts.monospace'
: 16:58:08 INFO: Opening in existing instance

#+begin_src python :results output :session session_init
baseColorMap = {"red": "#FF0000", "orange": "#FFA500", 
                "yellow": "#FFFF00", "green": "#00FF00", 
                "blue": "#0000FF", "violet": "#EE82EE",
                "grey": "#BEBEBE", "brown": "#A52A2A",
                "black": "#000000", "white": "#FFFFFF"}
# Actually, nevermind. Use the XKCD colors for the base colors, too. 
baseColorMap = {color: xkcdMap.get(color) for color in baseColorMap.keys()}
# print(baseColorMap)
baseDf = pd.DataFrame(baseColorMap.items(), columns=['name', 'hex'])
baseDf['parent'] = "color" # Ur-color
baseDf['parentHex'] = baseDf['hex']
baseDf['locs'] = ""
baseDf['id'] = baseDf['name']
totals = df.groupby(['parent'])['n'].sum()
baseDf['n'] = baseDf['name'].apply(dict(totals).get)
baseDf = baseDf.append({'name': 'color', 'hex': '#FFFFFF', 
                        'parent': '', 'parentHex': '', 'n': 100}, ignore_index=True)
# print(baseDf)
#+END_SRC

#+RESULTS:

#+begin_src python :results output :session session_init
dfAll = df.append(baseDf)
print(dfAll)

#+END_SRC

#+RESULTS:
#+begin_example
/nix/store/dyxmcff9gk03qnc5xlsg1rh99ziyx86k-python3-3.7.5-env/lib/python3.7/site-packages/pandas/core/frame.py:7138: FutureWarning:

Sorting because non-concatenation axis is not aligned. A future version
of pandas will change to not sort by default.

To accept the future behavior, pass 'sort=False'.

To retain the current behavior and silence the warning, pass 'sort=True'.


    Unnamed: 0      hex            id  ...    name  parent parentHex
0          0.0  #b2996e     grey-dust  ...    dust    grey   #929591
1          1.0  #65ab7c     green-tea  ...     tea   green   #15b01a
2          2.0  #0a5f38  green-spruce  ...  spruce   green   #15b01a
3          3.0  #ccad60   grey-desert  ...  desert    grey   #929591
4          4.0  #698339   green-swamp  ...   swamp   green   #15b01a
..         ...      ...           ...  ...     ...     ...       ...
6          NaN  #929591          grey  ...    grey   color   #929591
7          NaN  #653700         brown  ...   brown   color   #653700
8          NaN  #000000         black  ...   black   color   #000000
9          NaN  #ffffff         white  ...   white   color   #ffffff
10         NaN  #FFFFFF           NaN  ...   color                  

[90 rows x 8 columns]
#+end_example

#+begin_src python :results output :session session_init
dfAll.to_csv('dalloway-colors-formatted.csv')

#+END_SRC

#+RESULTS:

#+begin_src python :results output :session session_init
  fig = go.Figure()

  fig.add_trace(go.Sunburst(
      ids=dfAll['id'],
      labels=dfAll['name'],
      parents=dfAll['parent'],
      values=dfAll['n'],
      # domain=dict(column=1),
      #maxdepth=2,
      insidetextorientation='radial',
      marker = {"colors": dfAll['hex']},  
      branchvalues='total'
  ))

  # fig.update_layout(
  #     margin = dict(t=10, l=10, r=10, b=10)
  # )

  fig.show()
#+end_src

#+RESULTS:
: 17:32:19 ERROR: Error while loading config.py
: Traceback (most recent call last):
:   File "/nix/store/w2jvkmmykaidfz4xpc7vc4w40gffqza0-qutebrowser-1.10.0/lib/python3.7/site-packages/qutebrowser/config/configinit.py", line 67, in early_init
:     configfiles.read_config_py(config_file)
:   File "/nix/store/w2jvkmmykaidfz4xpc7vc4w40gffqza0-qutebrowser-1.10.0/lib/python3.7/site-packages/qutebrowser/config/configfiles.py", line 743, in read_config_py
:     raise configexc.ConfigFileErrors('config.py', api.errors)
: qutebrowser.config.configexc.ConfigFileErrors: Errors occurred while reading config.py:
:   While setting 'fonts.monospace': No option 'fonts.monospace'
: 17:32:19 INFO: Opening in existing instance
*** Make hover text

#+begin_src python :results output :session session_init
import findColors
#+end_src

#+RESULTS:
: Python 3.7.6 (default, Dec 18 2019, 19:23:55) 
: [GCC 9.2.0] on linux
: Type "help", "copyright", "credits" or "license" for more information.
: Traceback (most recent call last):
:   File "<stdin>", line 1, in <module>
: ModuleNotFoundError: No module named 'findColors'
** Categorize colors semantically, with word vectors

- POS tag the text
- Get all the nouns, adjectives, verbs (whatever can be imagined)
- Calculate cosine distances to each of the XKCD color names
 
#+begin_src sh
echo $VIRTUAL_ENV
#+end_src

#+RESULTS:
: /home/jon/.virtualenvs/04-colors-ZEWMFy_F

#+BEGIN_SRC elisp :session session_init
(setq org-babel-python-command "nix-shell --run python")
#+END_SRC

#+RESULTS:
: nix-shell --run python
  
#+BEGIN_SRC python :results output :session session_init2
import spacy
import pandas as pd
#from nltk.corpus import wordnet as wn
import nltk
import matplotlib.pyplot as plt
import re
import altair as alt
from matplotlib.colors import to_rgb, rgb_to_hsv
nlp = spacy.load('en_core_web_lg')
#dalloway = open('dalloway.txt', errors="ignore").read()
#+END_SRC

#+RESULTS:
: Traceback (most recent call last):
:   File "<stdin>", line 1, in <module>
:   File "/tmp/babel-GE4s8p/python-LguuqY", line 1, in <module>
:     import spacy
: ModuleNotFoundError: No module named 'spacy'
** Compute distribution of parent colors

#+BEGIN_SRC sh
echo $PWD
#+END_SRC

#+RESULTS:
: /home/jon/Dropbox/Columbia/Dissertation/04-colors/python-analysis

#+BEGIN_SRC elisp :session session_init
(setq org-babel-python-command "nix-shell --run python")
#+END_SRC

#+RESULTS:
: nix-shell --run python

#+BEGIN_SRC python :results output :session session_init
import pandas as pd
import altair as alt
import findColors # My own module
from colorMaps import xkcdMap
import plotly.express as px
#+END_SRC

#+RESULTS:


#+BEGIN_SRC python :results output :session session_init
fileName = "../data/text/lighthouse-small.txt"
with open(fileName) as f:
  fileContents = f.read()

colorText = findColors.ColorText(fileName, fileContents, 'lighthouse', xkcdMap, 20, 10)  

# cf.set_config_file(offline=True)
#+END_SRC

#+RESULTS:


#+BEGIN_SRC python :results output :session session_init
parentDist = colorText.df.groupby('parent').sum()['n']
#+END_SRC

#+RESULTS:

#+BEGIN_SRC python :results file :session session_init
fig = px.bar(colorText.df)
fig.to_html('out.html')
#+END_SRC

#+RESULTS:
