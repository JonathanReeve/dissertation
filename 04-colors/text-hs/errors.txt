
TEI.hs:42:39: error:
    Variable not in scope:
      makeSections :: Bool -> Maybe Integer -> a -> [Block]
   |
42 |   let fromBlocks = blocksToTEI opts . makeSections False (Just startLvl)
   |                                       ^^^^^^^^^^^^

TEI.hs:43:15: error:
    Variable not in scope:
      metaToContext
        :: WriterOptions
           -> (a0 -> m (Doc Text))
           -> ([Inline] -> f0 (Doc Text))
           -> Meta
           -> m aeson-1.4.6.0:Data.Aeson.Types.Internal.Value
   |
43 |   metadata <- metaToContext opts
   |               ^^^^^^^^^^^^^

TEI.hs:79:12: error:
    • Couldn't match expected type ‘Doc Text’
                  with actual type ‘Text.Pandoc.Pretty.Doc’
      NB: ‘Text.Pandoc.Pretty.Doc’
            is defined in ‘Text.Pandoc.Pretty’ in package ‘pandoc-2.7.3’
          ‘Doc’ is defined in ‘Text.DocLayout’ in package ‘doclayout-0.2.0.1’
    • In the first argument of ‘($$)’, namely
        ‘inTagsIndented "label" term'’
      In the second argument of ‘($)’, namely
        ‘inTagsIndented "label" term' $$ inTagsIndented "item" defs'’
      In a stmt of a 'do' block:
        return
          $ inTagsIndented "label" term' $$ inTagsIndented "item" defs'
   |
79 |   return $ inTagsIndented "label" term' $$
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

TEI.hs:79:35: error:
    • Couldn't match expected type ‘Text.Pandoc.Pretty.Doc’
                  with actual type ‘Doc Text’
      NB: ‘Doc’
            is defined in ‘Text.DocLayout’ in package ‘doclayout-0.2.0.1’
          ‘Text.Pandoc.Pretty.Doc’
            is defined in ‘Text.Pandoc.Pretty’ in package ‘pandoc-2.7.3’
    • In the second argument of ‘inTagsIndented’, namely ‘term'’
      In the first argument of ‘($$)’, namely
        ‘inTagsIndented "label" term'’
      In the second argument of ‘($)’, namely
        ‘inTagsIndented "label" term' $$ inTagsIndented "item" defs'’
   |
79 |   return $ inTagsIndented "label" term' $$
   |                                   ^^^^^

TEI.hs:80:12: error:
    • Couldn't match expected type ‘Doc Text’
                  with actual type ‘Text.Pandoc.Pretty.Doc’
      NB: ‘Text.Pandoc.Pretty.Doc’
            is defined in ‘Text.Pandoc.Pretty’ in package ‘pandoc-2.7.3’
          ‘Doc’ is defined in ‘Text.DocLayout’ in package ‘doclayout-0.2.0.1’
    • In the second argument of ‘($$)’, namely
        ‘inTagsIndented "item" defs'’
      In the second argument of ‘($)’, namely
        ‘inTagsIndented "label" term' $$ inTagsIndented "item" defs'’
      In a stmt of a 'do' block:
        return
          $ inTagsIndented "label" term' $$ inTagsIndented "item" defs'
   |
80 |            inTagsIndented "item" defs'
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^

TEI.hs:80:34: error:
    • Couldn't match expected type ‘Text.Pandoc.Pretty.Doc’
                  with actual type ‘Doc Text’
      NB: ‘Doc’
            is defined in ‘Text.DocLayout’ in package ‘doclayout-0.2.0.1’
          ‘Text.Pandoc.Pretty.Doc’
            is defined in ‘Text.Pandoc.Pretty’ in package ‘pandoc-2.7.3’
    • In the second argument of ‘inTagsIndented’, namely ‘defs'’
      In the second argument of ‘($$)’, namely
        ‘inTagsIndented "item" defs'’
      In the second argument of ‘($)’, namely
        ‘inTagsIndented "label" term' $$ inTagsIndented "item" defs'’
   |
80 |            inTagsIndented "item" defs'
   |                                  ^^^^^

TEI.hs:89:3: error:
    • Couldn't match type ‘Text.Pandoc.Pretty.Doc’
                     with ‘Doc Text’
      NB: ‘Doc’
            is defined in ‘Text.DocLayout’ in package ‘doclayout-0.2.0.1’
          ‘Text.Pandoc.Pretty.Doc’
            is defined in ‘Text.Pandoc.Pretty’ in package ‘pandoc-2.7.3’
      Expected type: m (Doc Text)
        Actual type: m Text.Pandoc.Pretty.Doc
    • In the expression:
        inTagsIndented "item" <$> blocksToTEI opts (map plainToPara item)
      In an equation for ‘listItemToTEI’:
          listItemToTEI opts item
            = inTagsIndented "item" <$> blocksToTEI opts (map plainToPara item)
   |
89 |   inTagsIndented "item" <$> blocksToTEI opts (map plainToPara item)
   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

TEI.hs:89:29: error:
    • Couldn't match type ‘Doc Text’
                     with ‘Text.Pandoc.Pretty.Doc’
      NB: ‘Text.Pandoc.Pretty.Doc’
            is defined in ‘Text.Pandoc.Pretty’ in package ‘pandoc-2.7.3’
          ‘Doc’ is defined in ‘Text.DocLayout’ in package ‘doclayout-0.2.0.1’
      Expected type: m Text.Pandoc.Pretty.Doc
        Actual type: m (Doc Text)
    • In the second argument of ‘(<$>)’, namely
        ‘blocksToTEI opts (map plainToPara item)’
      In the expression:
        inTagsIndented "item" <$> blocksToTEI opts (map plainToPara item)
      In an equation for ‘listItemToTEI’:
          listItemToTEI opts item
            = inTagsIndented "item" <$> blocksToTEI opts (map plainToPara item)
   |
89 |   inTagsIndented "item" <$> blocksToTEI opts (map plainToPara item)
   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

TEI.hs:92:28: error:
    • Couldn't match type ‘Text.Pandoc.Pretty.Doc’
                     with ‘Doc Text’
      NB: ‘Doc’
            is defined in ‘Text.DocLayout’ in package ‘doclayout-0.2.0.1’
          ‘Text.Pandoc.Pretty.Doc’
            is defined in ‘Text.Pandoc.Pretty’ in package ‘pandoc-2.7.3’
      Expected type: m (Doc Text)
        Actual type: m Text.Pandoc.Pretty.Doc
    • In the expression:
        return
          $ selfClosingTag "graphic"
              $ ("url", src) : idFromAttr opts attr ++ dims
      In an equation for ‘imageToTEI’:
          imageToTEI opts attr src
            = return
                $ selfClosingTag "graphic"
                    $ ("url", src) : idFromAttr opts attr ++ dims
            where
                dims = go Width "width" ++ go Height "height"
                go dir dstr
                  = case dimension dir attr of
                      Just a -> ...
                      Nothing -> ...
   |
92 | imageToTEI opts attr src = return $ selfClosingTag "graphic" $
   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

TEI.hs:93:3: error:
    • Couldn't match type ‘Text’ with ‘[Char]’
      Expected type: [(String, String)]
        Actual type: [(Text, Text)]
    • In the second argument of ‘($)’, namely
        ‘("url", src) : idFromAttr opts attr ++ dims’
      In the second argument of ‘($)’, namely
        ‘selfClosingTag "graphic"
           $ ("url", src) : idFromAttr opts attr ++ dims’
      In the expression:
        return
          $ selfClosingTag "graphic"
              $ ("url", src) : idFromAttr opts attr ++ dims
   |
93 |   ("url", src) : idFromAttr opts attr ++ dims
   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

TEI.hs:97:40: error:
    • Variable not in scope: tshow :: Dimension -> b
    • Perhaps you meant ‘show’ (imported from Prelude)
   |
97 |                     Just a  -> [(dstr, tshow a)]
   |                                        ^^^^^

TEI.hs:113:53: error:
    • Variable not in scope: tshow :: Int -> Text
    • Perhaps you meant ‘show’ (imported from Prelude)
    |
113 |                    | n >= 1 && n <= 5 -> "level" <> tshow n
    |                                                     ^^^^^

TEI.hs:156:47: error:
    • Couldn't match type ‘Text’ with ‘[Char]’
      Expected type: String
        Actual type: Text
    • In the first argument of ‘escapeStringForXML’, namely
        ‘(head langs)’
      In the expression: escapeStringForXML (head langs)
      In the expression:
        if null langs then "" else escapeStringForXML (head langs)
    |
156 |                      else escapeStringForXML (head langs)
    |                                               ^^^^^^^^^^

TEI.hs:157:58: error:
    • Couldn't match type ‘[Char]’ with ‘Text’
      Expected type: [Text]
        Actual type: [String]
    • In the second argument of ‘map’, namely ‘languages’
      In the second argument of ‘elem’, namely ‘map T.toLower languages’
      In the expression: T.toLower l `elem` map T.toLower languages
    |
157 |           isLang l    = T.toLower l `elem` map T.toLower languages
    |                                                          ^^^^^^^^^

TEI.hs:160:33: error:
    • Couldn't match type ‘[Char]’ with ‘Text’
      Expected type: [Text]
        Actual type: [String]
    • In the expression: languagesByExtension . T.toLower $ s
      In the expression:
        if isLang s then [s] else languagesByExtension . T.toLower $ s
      In an equation for ‘langsFrom’:
          langsFrom s
            = if isLang s then [s] else languagesByExtension . T.toLower $ s
    |
160 |                            else languagesByExtension . T.toLower $ s
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

TEI.hs:160:56: error:
    • Couldn't match type ‘Text’ with ‘[Char]’
      Expected type: Text -> String
        Actual type: Text -> Text
    • In the second argument of ‘(.)’, namely ‘T.toLower’
      In the expression: languagesByExtension . T.toLower
      In the expression: languagesByExtension . T.toLower $ s
    |
160 |                            else languagesByExtension . T.toLower $ s
    |                                                        ^^^^^^^^^

TEI.hs:161:45: error:
    • Couldn't match type ‘[Char]’ with ‘Text’
      Expected type: [Text]
        Actual type: [String]
    • In the second argument of ‘concatMap’, namely ‘classes’
      In the expression: concatMap langsFrom classes
      In an equation for ‘langs’: langs = concatMap langsFrom classes
    |
161 |           langs       = concatMap langsFrom classes
    |                                             ^^^^^^^

TEI.hs:180:51: error:
    • Variable not in scope: tshow :: Int -> String
    • Perhaps you meant ‘show’ (imported from Prelude)
    |
180 |                 return $ inTags True "item" [("n",tshow start)] fi $$ re
    |                                                   ^^^^^

TEI.hs:209:3: error:
    • Couldn't match type ‘Text.Pandoc.Pretty.Doc’
                     with ‘Doc Text’
      NB: ‘Doc’
            is defined in ‘Text.DocLayout’ in package ‘doclayout-0.2.0.1’
          ‘Text.Pandoc.Pretty.Doc’
            is defined in ‘Text.Pandoc.Pretty’ in package ‘pandoc-2.7.3’
      Expected type: m (Doc Text)
        Actual type: m Text.Pandoc.Pretty.Doc
    • In the expression:
        (inTagsIndented "row" . vcat) <$> mapM (tableItemToTEI opts) cols
      In an equation for ‘tableRowToTEI’:
          tableRowToTEI opts cols
            = (inTagsIndented "row" . vcat) <$> mapM (tableItemToTEI opts) cols
    |
209 |   (inTagsIndented "row" . vcat) <$> mapM (tableItemToTEI opts) cols
    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

TEI.hs:209:27: error:
    • Couldn't match type ‘Doc Text’
                     with ‘Text.Pandoc.Pretty.Doc’
      NB: ‘Text.Pandoc.Pretty.Doc’
            is defined in ‘Text.Pandoc.Pretty’ in package ‘pandoc-2.7.3’
          ‘Doc’ is defined in ‘Text.DocLayout’ in package ‘doclayout-0.2.0.1’
      Expected type: [Doc Text] -> Text.Pandoc.Pretty.Doc
        Actual type: [Doc Text] -> Doc Text
    • In the second argument of ‘(.)’, namely ‘vcat’
      In the first argument of ‘(<$>)’, namely
        ‘(inTagsIndented "row" . vcat)’
      In the expression:
        (inTagsIndented "row" . vcat) <$> mapM (tableItemToTEI opts) cols
    |
209 |   (inTagsIndented "row" . vcat) <$> mapM (tableItemToTEI opts) cols
    |                           ^^^^

TEI.hs:216:3: error:
    • Couldn't match type ‘Text.Pandoc.Pretty.Doc’
                     with ‘Doc Text’
      NB: ‘Doc’
            is defined in ‘Text.DocLayout’ in package ‘doclayout-0.2.0.1’
          ‘Text.Pandoc.Pretty.Doc’
            is defined in ‘Text.Pandoc.Pretty’ in package ‘pandoc-2.7.3’
      Expected type: m (Doc Text)
        Actual type: m Text.Pandoc.Pretty.Doc
    • In the expression:
        (inTags True "row" [("role", "label")] . vcat)
          <$> mapM (tableItemToTEI opts) cols
      In an equation for ‘tableHeadersToTEI’:
          tableHeadersToTEI opts cols
            = (inTags True "row" [("role", "label")] . vcat)
                <$> mapM (tableItemToTEI opts) cols
    |
216 |   (inTags True "row" [("role","label")] . vcat) <$>
    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

TEI.hs:216:43: error:
    • Couldn't match type ‘Doc Text’
                     with ‘Text.Pandoc.Pretty.Doc’
      NB: ‘Text.Pandoc.Pretty.Doc’
            is defined in ‘Text.Pandoc.Pretty’ in package ‘pandoc-2.7.3’
          ‘Doc’ is defined in ‘Text.DocLayout’ in package ‘doclayout-0.2.0.1’
      Expected type: [Doc Text] -> Text.Pandoc.Pretty.Doc
        Actual type: [Doc Text] -> Doc Text
    • In the second argument of ‘(.)’, namely ‘vcat’
      In the first argument of ‘(<$>)’, namely
        ‘(inTags True "row" [("role", "label")] . vcat)’
      In the expression:
        (inTags True "row" [("role", "label")] . vcat)
          <$> mapM (tableItemToTEI opts) cols
    |
216 |   (inTags True "row" [("role","label")] . vcat) <$>
    |                                           ^^^^

TEI.hs:224:3: error:
    • Couldn't match type ‘Text.Pandoc.Pretty.Doc’
                     with ‘Doc Text’
      NB: ‘Doc’
            is defined in ‘Text.DocLayout’ in package ‘doclayout-0.2.0.1’
          ‘Text.Pandoc.Pretty.Doc’
            is defined in ‘Text.Pandoc.Pretty’ in package ‘pandoc-2.7.3’
      Expected type: m (Doc Text)
        Actual type: m Text.Pandoc.Pretty.Doc
    • In the expression:
        (inTags False "cell" [] . vcat) <$> mapM (blockToTEI opts) item
      In an equation for ‘tableItemToTEI’:
          tableItemToTEI opts item
            = (inTags False "cell" [] . vcat) <$> mapM (blockToTEI opts) item
    |
224 |   (inTags False "cell" [] . vcat) <$> mapM (blockToTEI opts) item
    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

TEI.hs:224:29: error:
    • Couldn't match type ‘Doc Text’
                     with ‘Text.Pandoc.Pretty.Doc’
      NB: ‘Text.Pandoc.Pretty.Doc’
            is defined in ‘Text.Pandoc.Pretty’ in package ‘pandoc-2.7.3’
          ‘Doc’ is defined in ‘Text.DocLayout’ in package ‘doclayout-0.2.0.1’
      Expected type: [Doc Text] -> Text.Pandoc.Pretty.Doc
        Actual type: [Doc Text] -> Doc Text
    • In the second argument of ‘(.)’, namely ‘vcat’
      In the first argument of ‘(<$>)’, namely
        ‘(inTags False "cell" [] . vcat)’
      In the expression:
        (inTags False "cell" [] . vcat) <$> mapM (blockToTEI opts) item
    |
224 |   (inTags False "cell" [] . vcat) <$> mapM (blockToTEI opts) item
    |                             ^^^^

TEI.hs:232:27: error:
    • Couldn't match type ‘[Char]’ with ‘Text’
      Expected type: m (Doc Text)
        Actual type: m (Doc String)
    • In the expression: return $ literal $ escapeStringForXML str
      In an equation for ‘inlineToTEI’:
          inlineToTEI _ (Str str) = return $ literal $ escapeStringForXML str
    |
232 | inlineToTEI _ (Str str) = return $ literal $ escapeStringForXML str
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

TEI.hs:234:3: error:
    • Couldn't match type ‘Text.Pandoc.Pretty.Doc’
                     with ‘Doc Text’
      NB: ‘Doc’
            is defined in ‘Text.DocLayout’ in package ‘doclayout-0.2.0.1’
          ‘Text.Pandoc.Pretty.Doc’
            is defined in ‘Text.Pandoc.Pretty’ in package ‘pandoc-2.7.3’
      Expected type: m (Doc Text)
        Actual type: m Text.Pandoc.Pretty.Doc
    • In the expression:
        inTags False "hi" [("rendition", "simple:italic")]
          <$> inlinesToTEI opts lst
      In an equation for ‘inlineToTEI’:
          inlineToTEI opts (Emph lst)
            = inTags False "hi" [("rendition", "simple:italic")]
                <$> inlinesToTEI opts lst
    |
234 |   inTags False "hi" [("rendition","simple:italic")] <$> inlinesToTEI opts lst
    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

TEI.hs:234:57: error:
    • Couldn't match type ‘Doc Text’
                     with ‘Text.Pandoc.Pretty.Doc’
      NB: ‘Text.Pandoc.Pretty.Doc’
            is defined in ‘Text.Pandoc.Pretty’ in package ‘pandoc-2.7.3’
          ‘Doc’ is defined in ‘Text.DocLayout’ in package ‘doclayout-0.2.0.1’
      Expected type: m Text.Pandoc.Pretty.Doc
        Actual type: m (Doc Text)
    • In the second argument of ‘(<$>)’, namely ‘inlinesToTEI opts lst’
      In the expression:
        inTags False "hi" [("rendition", "simple:italic")]
          <$> inlinesToTEI opts lst
      In an equation for ‘inlineToTEI’:
          inlineToTEI opts (Emph lst)
            = inTags False "hi" [("rendition", "simple:italic")]
                <$> inlinesToTEI opts lst
    |
234 |   inTags False "hi" [("rendition","simple:italic")] <$> inlinesToTEI opts lst
    |                                                         ^^^^^^^^^^^^^^^^^^^^^

TEI.hs:236:3: error:
    • Couldn't match type ‘Text.Pandoc.Pretty.Doc’
                     with ‘Doc Text’
      NB: ‘Doc’
            is defined in ‘Text.DocLayout’ in package ‘doclayout-0.2.0.1’
          ‘Text.Pandoc.Pretty.Doc’
            is defined in ‘Text.Pandoc.Pretty’ in package ‘pandoc-2.7.3’
      Expected type: m (Doc Text)
        Actual type: m Text.Pandoc.Pretty.Doc
    • In the expression:
        inTags False "hi" [("rendition", "simple:bold")]
          <$> inlinesToTEI opts lst
      In an equation for ‘inlineToTEI’:
          inlineToTEI opts (Strong lst)
            = inTags False "hi" [("rendition", "simple:bold")]
                <$> inlinesToTEI opts lst
    |
236 |   inTags False "hi" [("rendition", "simple:bold")] <$> inlinesToTEI opts lst
    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

TEI.hs:236:56: error:
    • Couldn't match type ‘Doc Text’
                     with ‘Text.Pandoc.Pretty.Doc’
      NB: ‘Text.Pandoc.Pretty.Doc’
            is defined in ‘Text.Pandoc.Pretty’ in package ‘pandoc-2.7.3’
          ‘Doc’ is defined in ‘Text.DocLayout’ in package ‘doclayout-0.2.0.1’
      Expected type: m Text.Pandoc.Pretty.Doc
        Actual type: m (Doc Text)
    • In the second argument of ‘(<$>)’, namely ‘inlinesToTEI opts lst’
      In the expression:
        inTags False "hi" [("rendition", "simple:bold")]
          <$> inlinesToTEI opts lst
      In an equation for ‘inlineToTEI’:
          inlineToTEI opts (Strong lst)
            = inTags False "hi" [("rendition", "simple:bold")]
                <$> inlinesToTEI opts lst
    |
236 |   inTags False "hi" [("rendition", "simple:bold")] <$> inlinesToTEI opts lst
    |                                                        ^^^^^^^^^^^^^^^^^^^^^

TEI.hs:238:3: error:
    • Couldn't match type ‘Text.Pandoc.Pretty.Doc’
                     with ‘Doc Text’
      NB: ‘Doc’
            is defined in ‘Text.DocLayout’ in package ‘doclayout-0.2.0.1’
          ‘Text.Pandoc.Pretty.Doc’
            is defined in ‘Text.Pandoc.Pretty’ in package ‘pandoc-2.7.3’
      Expected type: m (Doc Text)
        Actual type: m Text.Pandoc.Pretty.Doc
    • In the expression:
        inTags False "hi" [("rendition", "simple:strikethrough")]
          <$> inlinesToTEI opts lst
      In an equation for ‘inlineToTEI’:
          inlineToTEI opts (Strikeout lst)
            = inTags False "hi" [("rendition", "simple:strikethrough")]
                <$> inlinesToTEI opts lst
    |
238 |   inTags False "hi" [("rendition", "simple:strikethrough")] <$>
    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

TEI.hs:239:3: error:
    • Couldn't match type ‘Doc Text’
                     with ‘Text.Pandoc.Pretty.Doc’
      NB: ‘Text.Pandoc.Pretty.Doc’
            is defined in ‘Text.Pandoc.Pretty’ in package ‘pandoc-2.7.3’
          ‘Doc’ is defined in ‘Text.DocLayout’ in package ‘doclayout-0.2.0.1’
      Expected type: m Text.Pandoc.Pretty.Doc
        Actual type: m (Doc Text)
    • In the second argument of ‘(<$>)’, namely ‘inlinesToTEI opts lst’
      In the expression:
        inTags False "hi" [("rendition", "simple:strikethrough")]
          <$> inlinesToTEI opts lst
      In an equation for ‘inlineToTEI’:
          inlineToTEI opts (Strikeout lst)
            = inTags False "hi" [("rendition", "simple:strikethrough")]
                <$> inlinesToTEI opts lst
    |
239 |   inlinesToTEI opts lst
    |   ^^^^^^^^^^^^^^^^^^^^^

TEI.hs:241:3: error:
    • Couldn't match type ‘Text.Pandoc.Pretty.Doc’
                     with ‘Doc Text’
      NB: ‘Doc’
            is defined in ‘Text.DocLayout’ in package ‘doclayout-0.2.0.1’
          ‘Text.Pandoc.Pretty.Doc’
            is defined in ‘Text.Pandoc.Pretty’ in package ‘pandoc-2.7.3’
      Expected type: m (Doc Text)
        Actual type: m Text.Pandoc.Pretty.Doc
    • In the expression:
        inTags False "hi" [("rendition", "simple:superscript")]
          <$> inlinesToTEI opts lst
      In an equation for ‘inlineToTEI’:
          inlineToTEI opts (Superscript lst)
            = inTags False "hi" [("rendition", "simple:superscript")]
                <$> inlinesToTEI opts lst
    |
241 |   inTags False "hi" [("rendition", "simple:superscript")] <$>
    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

TEI.hs:242:5: error:
    • Couldn't match type ‘Doc Text’
                     with ‘Text.Pandoc.Pretty.Doc’
      NB: ‘Text.Pandoc.Pretty.Doc’
            is defined in ‘Text.Pandoc.Pretty’ in package ‘pandoc-2.7.3’
          ‘Doc’ is defined in ‘Text.DocLayout’ in package ‘doclayout-0.2.0.1’
      Expected type: m Text.Pandoc.Pretty.Doc
        Actual type: m (Doc Text)
    • In the second argument of ‘(<$>)’, namely ‘inlinesToTEI opts lst’
      In the expression:
        inTags False "hi" [("rendition", "simple:superscript")]
          <$> inlinesToTEI opts lst
      In an equation for ‘inlineToTEI’:
          inlineToTEI opts (Superscript lst)
            = inTags False "hi" [("rendition", "simple:superscript")]
                <$> inlinesToTEI opts lst
    |
242 |     inlinesToTEI opts lst
    |     ^^^^^^^^^^^^^^^^^^^^^

TEI.hs:244:3: error:
    • Couldn't match type ‘Text.Pandoc.Pretty.Doc’
                     with ‘Doc Text’
      NB: ‘Doc’
            is defined in ‘Text.DocLayout’ in package ‘doclayout-0.2.0.1’
          ‘Text.Pandoc.Pretty.Doc’
            is defined in ‘Text.Pandoc.Pretty’ in package ‘pandoc-2.7.3’
      Expected type: m (Doc Text)
        Actual type: m Text.Pandoc.Pretty.Doc
    • In the expression:
        inTags False "hi" [("rendition", "simple:subscript")]
          <$> inlinesToTEI opts lst
      In an equation for ‘inlineToTEI’:
          inlineToTEI opts (Subscript lst)
            = inTags False "hi" [("rendition", "simple:subscript")]
                <$> inlinesToTEI opts lst
    |
244 |   inTags False "hi" [("rendition", "simple:subscript")] <$>
    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

TEI.hs:245:5: error:
    • Couldn't match type ‘Doc Text’
                     with ‘Text.Pandoc.Pretty.Doc’
      NB: ‘Text.Pandoc.Pretty.Doc’
            is defined in ‘Text.Pandoc.Pretty’ in package ‘pandoc-2.7.3’
          ‘Doc’ is defined in ‘Text.DocLayout’ in package ‘doclayout-0.2.0.1’
      Expected type: m Text.Pandoc.Pretty.Doc
        Actual type: m (Doc Text)
    • In the second argument of ‘(<$>)’, namely ‘inlinesToTEI opts lst’
      In the expression:
        inTags False "hi" [("rendition", "simple:subscript")]
          <$> inlinesToTEI opts lst
      In an equation for ‘inlineToTEI’:
          inlineToTEI opts (Subscript lst)
            = inTags False "hi" [("rendition", "simple:subscript")]
                <$> inlinesToTEI opts lst
    |
245 |     inlinesToTEI opts lst
    |     ^^^^^^^^^^^^^^^^^^^^^

TEI.hs:247:3: error:
    • Couldn't match type ‘Text.Pandoc.Pretty.Doc’
                     with ‘Doc Text’
      NB: ‘Doc’
            is defined in ‘Text.DocLayout’ in package ‘doclayout-0.2.0.1’
          ‘Text.Pandoc.Pretty.Doc’
            is defined in ‘Text.Pandoc.Pretty’ in package ‘pandoc-2.7.3’
      Expected type: m (Doc Text)
        Actual type: m Text.Pandoc.Pretty.Doc
    • In the expression:
        inTags False "hi" [("rendition", "simple:smallcaps")]
          <$> inlinesToTEI opts lst
      In an equation for ‘inlineToTEI’:
          inlineToTEI opts (SmallCaps lst)
            = inTags False "hi" [("rendition", "simple:smallcaps")]
                <$> inlinesToTEI opts lst
    |
247 |   inTags False "hi" [("rendition", "simple:smallcaps")] <$>
    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

TEI.hs:248:5: error:
    • Couldn't match type ‘Doc Text’
                     with ‘Text.Pandoc.Pretty.Doc’
      NB: ‘Text.Pandoc.Pretty.Doc’
            is defined in ‘Text.Pandoc.Pretty’ in package ‘pandoc-2.7.3’
          ‘Doc’ is defined in ‘Text.DocLayout’ in package ‘doclayout-0.2.0.1’
      Expected type: m Text.Pandoc.Pretty.Doc
        Actual type: m (Doc Text)
    • In the second argument of ‘(<$>)’, namely ‘inlinesToTEI opts lst’
      In the expression:
        inTags False "hi" [("rendition", "simple:smallcaps")]
          <$> inlinesToTEI opts lst
      In an equation for ‘inlineToTEI’:
          inlineToTEI opts (SmallCaps lst)
            = inTags False "hi" [("rendition", "simple:smallcaps")]
                <$> inlinesToTEI opts lst
    |
248 |     inlinesToTEI opts lst
    |     ^^^^^^^^^^^^^^^^^^^^^

TEI.hs:250:3: error:
    • Couldn't match type ‘Text.Pandoc.Pretty.Doc’
                     with ‘Doc Text’
      NB: ‘Doc’
            is defined in ‘Text.DocLayout’ in package ‘doclayout-0.2.0.1’
          ‘Text.Pandoc.Pretty.Doc’
            is defined in ‘Text.Pandoc.Pretty’ in package ‘pandoc-2.7.3’
      Expected type: m (Doc Text)
        Actual type: m Text.Pandoc.Pretty.Doc
    • In the expression: inTagsSimple "quote" <$> inlinesToTEI opts lst
      In an equation for ‘inlineToTEI’:
          inlineToTEI opts (Quoted _ lst)
            = inTagsSimple "quote" <$> inlinesToTEI opts lst
    |
250 |   inTagsSimple "quote" <$> inlinesToTEI opts lst
    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

TEI.hs:250:28: error:
    • Couldn't match type ‘Doc Text’
                     with ‘Text.Pandoc.Pretty.Doc’
      NB: ‘Text.Pandoc.Pretty.Doc’
            is defined in ‘Text.Pandoc.Pretty’ in package ‘pandoc-2.7.3’
          ‘Doc’ is defined in ‘Text.DocLayout’ in package ‘doclayout-0.2.0.1’
      Expected type: m Text.Pandoc.Pretty.Doc
        Actual type: m (Doc Text)
    • In the second argument of ‘(<$>)’, namely ‘inlinesToTEI opts lst’
      In the expression: inTagsSimple "quote" <$> inlinesToTEI opts lst
      In an equation for ‘inlineToTEI’:
          inlineToTEI opts (Quoted _ lst)
            = inTagsSimple "quote" <$> inlinesToTEI opts lst
    |
250 |   inTagsSimple "quote" <$> inlinesToTEI opts lst
    |                            ^^^^^^^^^^^^^^^^^^^^^

TEI.hs:255:30: error:
    • Couldn't match type ‘Text.Pandoc.Pretty.Doc’
                     with ‘Doc Text’
      NB: ‘Doc’
            is defined in ‘Text.DocLayout’ in package ‘doclayout-0.2.0.1’
          ‘Text.Pandoc.Pretty.Doc’
            is defined in ‘Text.Pandoc.Pretty’ in package ‘pandoc-2.7.3’
      Expected type: m (Doc Text)
        Actual type: m Text.Pandoc.Pretty.Doc
    • In the expression:
        return
          $ inTags False "seg" [("type", "code")]
              $ literal (escapeStringForXML str)
      In an equation for ‘inlineToTEI’:
          inlineToTEI _ (Code _ str)
            = return
                $ inTags False "seg" [("type", "code")]
                    $ literal (escapeStringForXML str)
    |
255 | inlineToTEI _ (Code _ str) = return $
    |                              ^^^^^^^^...

TEI.hs:256:42: error:
    • Couldn't match expected type ‘Text.Pandoc.Pretty.Doc’
                  with actual type ‘Doc String’
      NB: ‘Doc’
            is defined in ‘Text.DocLayout’ in package ‘doclayout-0.2.0.1’
          ‘Text.Pandoc.Pretty.Doc’
            is defined in ‘Text.Pandoc.Pretty’ in package ‘pandoc-2.7.3’
    • In the second argument of ‘($)’, namely
        ‘literal (escapeStringForXML str)’
      In the second argument of ‘($)’, namely
        ‘inTags False "seg" [("type", "code")]
           $ literal (escapeStringForXML str)’
      In the expression:
        return
          $ inTags False "seg" [("type", "code")]
              $ literal (escapeStringForXML str)
    |
256 |   inTags False "seg" [("type","code")] $ literal (escapeStringForXML str)
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

TEI.hs:258:30: error:
    • Couldn't match type ‘Text.Pandoc.Pretty.Doc’
                     with ‘Doc Text’
      NB: ‘Doc’
            is defined in ‘Text.DocLayout’ in package ‘doclayout-0.2.0.1’
          ‘Text.Pandoc.Pretty.Doc’
            is defined in ‘Text.Pandoc.Pretty’ in package ‘pandoc-2.7.3’
      Expected type: m (Doc Text)
        Actual type: m Text.Pandoc.Pretty.Doc
    • In the expression:
        return
          $ case t of
              InlineMath
                -> inTags False "formula" [("notation", "TeX")] $ literal str
              DisplayMath
                -> inTags True "figure" [("type", "math")]
                     $ inTags False "formula" [("notation", "TeX")] $ literal str
      In an equation for ‘inlineToTEI’:
          inlineToTEI _ (Math t str)
            = return
                $ case t of
                    InlineMath
                      -> inTags False "formula" [("notation", "TeX")] $ literal str
                    DisplayMath
                      -> inTags True "figure" [("type", "math")]
                           $ inTags False "formula" [("notation", "TeX")] $ literal str
    |
258 | inlineToTEI _ (Math t str) = return $
    |                              ^^^^^^^^...

TEI.hs:261:20: error:
    • Couldn't match expected type ‘Text.Pandoc.Pretty.Doc’
                  with actual type ‘Doc String’
      NB: ‘Doc’
            is defined in ‘Text.DocLayout’ in package ‘doclayout-0.2.0.1’
          ‘Text.Pandoc.Pretty.Doc’
            is defined in ‘Text.Pandoc.Pretty’ in package ‘pandoc-2.7.3’
    • In the second argument of ‘($)’, namely ‘literal str’
      In the expression:
        inTags False "formula" [("notation", "TeX")] $ literal str
      In a case alternative:
          InlineMath
            -> inTags False "formula" [("notation", "TeX")] $ literal str
    |
261 |                    literal str
    |                    ^^^^^^^^^^^

TEI.hs:263:66: error:
    • Couldn't match expected type ‘Text.Pandoc.Pretty.Doc’
                  with actual type ‘Doc String’
      NB: ‘Doc’
            is defined in ‘Text.DocLayout’ in package ‘doclayout-0.2.0.1’
          ‘Text.Pandoc.Pretty.Doc’
            is defined in ‘Text.Pandoc.Pretty’ in package ‘pandoc-2.7.3’
    • In the second argument of ‘($)’, namely ‘literal str’
      In the second argument of ‘($)’, namely
        ‘inTags False "formula" [("notation", "TeX")] $ literal str’
      In the expression:
        inTags True "figure" [("type", "math")]
          $ inTags False "formula" [("notation", "TeX")] $ literal str
    |
263 |                    inTags False "formula" [("notation","TeX")] $ literal str
    |                                                                  ^^^^^^^^^^^

TEI.hs:265:53: error:
    • Couldn't match type ‘[Char]’ with ‘Text’
      Expected type: m (Doc Text)
        Actual type: m (Doc String)
    • In the expression: return $ literal x
      In an equation for ‘inlineToTEI’:
          inlineToTEI _ il@(RawInline f x)
            | f == "tei" = return $ literal x
            | otherwise = empty <$ report (InlineNotRendered il)
    |
265 | inlineToTEI _ il@(RawInline f x) | f == "tei"     = return $ literal x
    |                                                     ^^^^^^^^^^^^^^^^^^

TEI.hs:268:27: error:
    • Couldn't match type ‘Text.Pandoc.Pretty.Doc’
                     with ‘Doc Text’
      NB: ‘Doc’
            is defined in ‘Text.DocLayout’ in package ‘doclayout-0.2.0.1’
          ‘Text.Pandoc.Pretty.Doc’
            is defined in ‘Text.Pandoc.Pretty’ in package ‘pandoc-2.7.3’
      Expected type: m (Doc Text)
        Actual type: m Text.Pandoc.Pretty.Doc
    • In the expression: return $ selfClosingTag "lb" []
      In an equation for ‘inlineToTEI’:
          inlineToTEI _ LineBreak = return $ selfClosingTag "lb" []
    |
268 | inlineToTEI _ LineBreak = return $ selfClosingTag "lb" []
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

TEI.hs:275:43: error:
    • Couldn't match type ‘[Char]’ with ‘Text’
      Expected type: Text
        Actual type: String
    • In the second argument of ‘T.stripPrefix’, namely ‘src’
      In a stmt of a pattern guard for
                     an equation for ‘inlineToTEI’:
        Just email <- T.stripPrefix "mailto:" src
      In an equation for ‘inlineToTEI’:
          inlineToTEI opts (Link attr txt (src, _))
            | Just email <- T.stripPrefix "mailto:" src
            = do let emailLink = ...
                 case txt of
                   [Str s] | escapeURI s == email -> return emailLink
                   _ -> ...
            | otherwise
            = (inTags False "ref" $ ("target", src) : idFromAttr opts attr)
                <$> inlinesToTEI opts txt
    |
275 |   | Just email <- T.stripPrefix "mailto:" src = do
    |                                           ^^^

TEI.hs:277:42: error:
    • Couldn't match type ‘Text’ with ‘[Char]’
      Expected type: String
        Actual type: Text
    • In the first argument of ‘escapeStringForXML’, namely ‘email’
      In the second argument of ‘($)’, namely ‘escapeStringForXML email’
      In the expression: literal $ escapeStringForXML email
    |
277 |                       escapeStringForXML email
    |                                          ^^^^^

TEI.hs:279:37: error:
    • Couldn't match type ‘Text’ with ‘[Char]’
      Expected type: String
        Actual type: Text
    • In the second argument of ‘(==)’, namely ‘email’
      In the expression: escapeURI s == email
      In a stmt of a pattern guard for
                     a case alternative:
        escapeURI s == email
    |
279 |            [Str s] | escapeURI s == email ->
    |                                     ^^^^^

TEI.hs:280:24: error:
    • Couldn't match type ‘[Char]’ with ‘Text’
      Expected type: m (Doc Text)
        Actual type: m (Doc String)
    • In the expression: return emailLink
      In a case alternative:
          [Str s] | escapeURI s == email -> return emailLink
      In a stmt of a 'do' block:
        case txt of
          [Str s] | escapeURI s == email -> return emailLink
          _ -> do linktext <- inlinesToTEI opts txt
                  return $ linktext <+> char '(' <> emailLink <> char ')'
    |
280 |                        return emailLink
    |                        ^^^^^^^^^^^^^^^^

TEI.hs:283:37: error:
    • Couldn't match type ‘[Char]’ with ‘Text’
      Expected type: Doc Text
        Actual type: Doc String
    • In the second argument of ‘(<+>)’, namely
        ‘char '(' <> emailLink <> char ')'’
      In the second argument of ‘($)’, namely
        ‘linktext <+> char '(' <> emailLink <> char ')'’
      In a stmt of a 'do' block:
        return $ linktext <+> char '(' <> emailLink <> char ')'
    |
283 |               return $ linktext <+> char '(' <> emailLink <> char ')'
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

TEI.hs:285:7: error:
    • Couldn't match type ‘Text.Pandoc.Pretty.Doc’
                     with ‘Doc Text’
      NB: ‘Doc’
            is defined in ‘Text.DocLayout’ in package ‘doclayout-0.2.0.1’
          ‘Text.Pandoc.Pretty.Doc’
            is defined in ‘Text.Pandoc.Pretty’ in package ‘pandoc-2.7.3’
      Expected type: m (Doc Text)
        Actual type: m Text.Pandoc.Pretty.Doc
    • In the expression:
        (inTags False "ref" $ ("target", src) : idFromAttr opts attr)
          <$> inlinesToTEI opts txt
      In an equation for ‘inlineToTEI’:
          inlineToTEI opts (Link attr txt (src, _))
            | Just email <- T.stripPrefix "mailto:" src
            = do let emailLink = ...
                 case txt of
                   [Str s] | escapeURI s == email -> return emailLink
                   _ -> ...
            | otherwise
            = (inTags False "ref" $ ("target", src) : idFromAttr opts attr)
                <$> inlinesToTEI opts txt
    |
285 |       (inTags False "ref" $ ("target", src) : idFromAttr opts attr)
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

TEI.hs:285:29: error:
    • Couldn't match type ‘Text’ with ‘[Char]’
      Expected type: [(String, String)]
        Actual type: [(Text, String)]
    • In the second argument of ‘($)’, namely
        ‘("target", src) : idFromAttr opts attr’
      In the first argument of ‘(<$>)’, namely
        ‘(inTags False "ref" $ ("target", src) : idFromAttr opts attr)’
      In the expression:
        (inTags False "ref" $ ("target", src) : idFromAttr opts attr)
          <$> inlinesToTEI opts txt
    |
285 |       (inTags False "ref" $ ("target", src) : idFromAttr opts attr)
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

TEI.hs:285:47: error:
    • Couldn't match type ‘Text’ with ‘[Char]’
      Expected type: [(Text, String)]
        Actual type: [(Text, Text)]
    • In the second argument of ‘(:)’, namely ‘idFromAttr opts attr’
      In the second argument of ‘($)’, namely
        ‘("target", src) : idFromAttr opts attr’
      In the first argument of ‘(<$>)’, namely
        ‘(inTags False "ref" $ ("target", src) : idFromAttr opts attr)’
    |
285 |       (inTags False "ref" $ ("target", src) : idFromAttr opts attr)
    |                                               ^^^^^^^^^^^^^^^^^^^^

TEI.hs:286:22: error:
    • Couldn't match type ‘Doc Text’
                     with ‘Text.Pandoc.Pretty.Doc’
      NB: ‘Text.Pandoc.Pretty.Doc’
            is defined in ‘Text.Pandoc.Pretty’ in package ‘pandoc-2.7.3’
          ‘Doc’ is defined in ‘Text.DocLayout’ in package ‘doclayout-0.2.0.1’
      Expected type: m Text.Pandoc.Pretty.Doc
        Actual type: m (Doc Text)
    • In the second argument of ‘(<$>)’, namely ‘inlinesToTEI opts txt’
      In the expression:
        (inTags False "ref" $ ("target", src) : idFromAttr opts attr)
          <$> inlinesToTEI opts txt
      In an equation for ‘inlineToTEI’:
          inlineToTEI opts (Link attr txt (src, _))
            | Just email <- T.stripPrefix "mailto:" src
            = do let emailLink = ...
                 case txt of
                   [Str s] | escapeURI s == email -> return emailLink
                   _ -> ...
            | otherwise
            = (inTags False "ref" $ ("target", src) : idFromAttr opts attr)
                <$> inlinesToTEI opts txt
    |
286 |                  <$> inlinesToTEI opts txt
    |                      ^^^^^^^^^^^^^^^^^^^^^

TEI.hs:288:28: error:
    • Couldn't match type ‘[Char]’ with ‘Text’
      Expected type: Text
        Actual type: String
    • In the first argument of ‘T.null’, namely ‘tit’
      In the expression: T.null tit
      In the expression:
        if T.null tit then
            empty
        else
            inTags False "figDesc" [] (literal $ escapeStringForXML tit)
    |
288 |   let titleDoc = if T.null tit
    |                            ^^^

TEI.hs:290:25: error:
    • Couldn't match expected type ‘Doc a’
                  with actual type ‘Text.Pandoc.Pretty.Doc’
      NB: ‘Text.Pandoc.Pretty.Doc’
            is defined in ‘Text.Pandoc.Pretty’ in package ‘pandoc-2.7.3’
          ‘Doc’ is defined in ‘Text.DocLayout’ in package ‘doclayout-0.2.0.1’
    • In the expression:
        inTags False "figDesc" [] (literal $ escapeStringForXML tit)
      In the expression:
        if T.null tit then
            empty
        else
            inTags False "figDesc" [] (literal $ escapeStringForXML tit)
      In an equation for ‘titleDoc’:
          titleDoc
            = if T.null tit then
                  empty
              else
                  inTags False "figDesc" [] (literal $ escapeStringForXML tit)
    • Relevant bindings include
        titleDoc :: Doc a (bound at TEI.hs:288:7)
    |
290 |                    else inTags False "figDesc" []
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^...

TEI.hs:291:29: error:
    • Couldn't match expected type ‘Text.Pandoc.Pretty.Doc’
                  with actual type ‘Doc String’
      NB: ‘Doc’
            is defined in ‘Text.DocLayout’ in package ‘doclayout-0.2.0.1’
          ‘Text.Pandoc.Pretty.Doc’
            is defined in ‘Text.Pandoc.Pretty’ in package ‘pandoc-2.7.3’
    • In the fourth argument of ‘inTags’, namely
        ‘(literal $ escapeStringForXML tit)’
      In the expression:
        inTags False "figDesc" [] (literal $ escapeStringForXML tit)
      In the expression:
        if T.null tit then
            empty
        else
            inTags False "figDesc" [] (literal $ escapeStringForXML tit)
    |
291 |                            (literal $ escapeStringForXML tit)
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

TEI.hs:294:24: error:
    • Couldn't match type ‘Text.Pandoc.Pretty.Doc’
                     with ‘Doc Text’
      NB: ‘Doc’
            is defined in ‘Text.DocLayout’ in package ‘doclayout-0.2.0.1’
          ‘Text.Pandoc.Pretty.Doc’
            is defined in ‘Text.Pandoc.Pretty’ in package ‘pandoc-2.7.3’
      Expected type: m (Doc Text)
        Actual type: m Text.Pandoc.Pretty.Doc
    • In the expression:
        inTags False "head" [] <$> inlinesToTEI opts description
      In a stmt of a 'do' block:
        imageDesc <- if null description then
                         return empty
                     else
                         inTags False "head" [] <$> inlinesToTEI opts description
      In the expression:
        do let titleDoc = ...
           imageDesc <- if null description then
                            return empty
                        else
                            inTags False "head" [] <$> inlinesToTEI opts description
           img <- imageToTEI opts attr src
           return $ inTagsIndented "figure" $ imageDesc $$ img $$ titleDoc
    |
294 |                   else inTags False "head" []
    |                        ^^^^^^^^^^^^^^^^^^^^^^...

TEI.hs:295:30: error:
    • Couldn't match type ‘Doc Text’
                     with ‘Text.Pandoc.Pretty.Doc’
      NB: ‘Text.Pandoc.Pretty.Doc’
            is defined in ‘Text.Pandoc.Pretty’ in package ‘pandoc-2.7.3’
          ‘Doc’ is defined in ‘Text.DocLayout’ in package ‘doclayout-0.2.0.1’
      Expected type: m Text.Pandoc.Pretty.Doc
        Actual type: m (Doc Text)
    • In the second argument of ‘(<$>)’, namely
        ‘inlinesToTEI opts description’
      In the expression:
        inTags False "head" [] <$> inlinesToTEI opts description
      In a stmt of a 'do' block:
        imageDesc <- if null description then
                         return empty
                     else
                         inTags False "head" [] <$> inlinesToTEI opts description
    |
295 |                          <$> inlinesToTEI opts description
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

TEI.hs:296:31: error:
    • Couldn't match type ‘[Char]’ with ‘Text’
      Expected type: Text
        Actual type: String
    • In the third argument of ‘imageToTEI’, namely ‘src’
      In a stmt of a 'do' block: img <- imageToTEI opts attr src
      In the expression:
        do let titleDoc = ...
           imageDesc <- if null description then
                            return empty
                        else
                            inTags False "head" [] <$> inlinesToTEI opts description
           img <- imageToTEI opts attr src
           return $ inTagsIndented "figure" $ imageDesc $$ img $$ titleDoc
    |
296 |   img <- imageToTEI opts attr src
    |                               ^^^

TEI.hs:297:3: error:
    • Couldn't match type ‘Text.Pandoc.Pretty.Doc’
                     with ‘Doc Text’
      NB: ‘Doc’
            is defined in ‘Text.DocLayout’ in package ‘doclayout-0.2.0.1’
          ‘Text.Pandoc.Pretty.Doc’
            is defined in ‘Text.Pandoc.Pretty’ in package ‘pandoc-2.7.3’
      Expected type: m (Doc Text)
        Actual type: m Text.Pandoc.Pretty.Doc
    • In a stmt of a 'do' block:
        return $ inTagsIndented "figure" $ imageDesc $$ img $$ titleDoc
      In the expression:
        do let titleDoc = ...
           imageDesc <- if null description then
                            return empty
                        else
                            inTags False "head" [] <$> inlinesToTEI opts description
           img <- imageToTEI opts attr src
           return $ inTagsIndented "figure" $ imageDesc $$ img $$ titleDoc
      In an equation for ‘inlineToTEI’:
          inlineToTEI opts (Image attr description (src, tit))
            = do let titleDoc = ...
                 imageDesc <- if null description then
                                  return empty
                              else
                                  inTags False "head" [] <$> inlinesToTEI opts description
                 img <- imageToTEI opts attr src
                 ....
    |
297 |   return $ inTagsIndented "figure" $ imageDesc $$ img $$ titleDoc
    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

TEI.hs:297:38: error:
    • Couldn't match expected type ‘Text.Pandoc.Pretty.Doc’
                  with actual type ‘Doc Text’
      NB: ‘Doc’
            is defined in ‘Text.DocLayout’ in package ‘doclayout-0.2.0.1’
          ‘Text.Pandoc.Pretty.Doc’
            is defined in ‘Text.Pandoc.Pretty’ in package ‘pandoc-2.7.3’
    • In the second argument of ‘($)’, namely
        ‘imageDesc $$ img $$ titleDoc’
      In the second argument of ‘($)’, namely
        ‘inTagsIndented "figure" $ imageDesc $$ img $$ titleDoc’
      In a stmt of a 'do' block:
        return $ inTagsIndented "figure" $ imageDesc $$ img $$ titleDoc
    |
297 |   return $ inTagsIndented "figure" $ imageDesc $$ img $$ titleDoc
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

TEI.hs:299:3: error:
    • Couldn't match type ‘Text.Pandoc.Pretty.Doc’
                     with ‘Doc Text’
      NB: ‘Doc’
            is defined in ‘Text.DocLayout’ in package ‘doclayout-0.2.0.1’
          ‘Text.Pandoc.Pretty.Doc’
            is defined in ‘Text.Pandoc.Pretty’ in package ‘pandoc-2.7.3’
      Expected type: m (Doc Text)
        Actual type: m Text.Pandoc.Pretty.Doc
    • In the expression:
        inTagsIndented "note" <$> blocksToTEI opts contents
      In an equation for ‘inlineToTEI’:
          inlineToTEI opts (Note contents)
            = inTagsIndented "note" <$> blocksToTEI opts contents
    |
299 |   inTagsIndented "note" <$> blocksToTEI opts contents
    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

TEI.hs:299:29: error:
    • Couldn't match type ‘Doc Text’
                     with ‘Text.Pandoc.Pretty.Doc’
      NB: ‘Text.Pandoc.Pretty.Doc’
            is defined in ‘Text.Pandoc.Pretty’ in package ‘pandoc-2.7.3’
          ‘Doc’ is defined in ‘Text.DocLayout’ in package ‘doclayout-0.2.0.1’
      Expected type: m Text.Pandoc.Pretty.Doc
        Actual type: m (Doc Text)
    • In the second argument of ‘(<$>)’, namely
        ‘blocksToTEI opts contents’
      In the expression:
        inTagsIndented "note" <$> blocksToTEI opts contents
      In an equation for ‘inlineToTEI’:
          inlineToTEI opts (Note contents)
            = inTagsIndented "note" <$> blocksToTEI opts contents
    |
299 |   inTagsIndented "note" <$> blocksToTEI opts contents
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^

TEI.hs:303:13: error:
    • Couldn't match type ‘[Char]’ with ‘Text’
      Expected type: Text
        Actual type: String
    • In the first argument of ‘T.null’, namely ‘id'’
      In the expression: T.null id'
      In the expression:
        if T.null id' then
            []
        else
            [("xml:id", writerIdentifierPrefix opts <> id')]
    |
303 |   if T.null id'
    |             ^^^

TEI.hs:305:23: error:
    • Couldn't match type ‘[Char]’ with ‘Text’
      Expected type: Text
        Actual type: String
    • In the expression: writerIdentifierPrefix opts <> id'
      In the expression: ("xml:id", writerIdentifierPrefix opts <> id')
      In the expression: [("xml:id", writerIdentifierPrefix opts <> id')]
    |
305 |      else [("xml:id", writerIdentifierPrefix opts <> id')]
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
